-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\psd_db\psd_src_PSD_Calculation.vhd
-- Created: 2020-10-15 20:02:01
-- 
-- Generated by MATLAB 9.8 and HDL Coder 3.16
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Model base rate: 3.90625e-09
-- Target subsystem base rate: 3.90625e-09
-- 
-- 
-- Clock Enable  Sample Time
-- -------------------------------------------------------------
-- ce_out        3.90625e-09
-- -------------------------------------------------------------
-- 
-- 
-- Output Signal                 Clock Enable  Sample Time
-- -------------------------------------------------------------
-- m_axis_tvalid                 ce_out        3.90625e-09
-- m_axis_tdata                  ce_out        3.90625e-09
-- m_axis_tlast                  ce_out        3.90625e-09
-- m_axis_tuser                  ce_out        3.90625e-09
-- -------------------------------------------------------------
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: psd_src_PSD_Calculation
-- Source Path: psd_db/PSD Calculation
-- Hierarchy Level: 0
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.psd_src_PSD_Calculation_pkg.ALL;

ENTITY psd_src_PSD_Calculation IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        clk_enable                        :   IN    std_logic;
        output_selection                  :   IN    std_logic_vector(31 DOWNTO 0);  -- uint32
        window                            :   IN    std_logic_vector(31 DOWNTO 0);  -- uint32
        rbw                               :   IN    std_logic_vector(31 DOWNTO 0);  -- uint32
        s_axis_tvalid                     :   IN    std_logic;
        s_axis_tdata                      :   IN    std_logic_vector(31 DOWNTO 0);  -- uint32
        s_axis_tlast                      :   IN    std_logic;
        s_axis_tuser                      :   IN    std_logic;
        ce_out                            :   OUT   std_logic;
        m_axis_tvalid                     :   OUT   std_logic;
        m_axis_tdata                      :   OUT   std_logic_vector(31 DOWNTO 0);  -- uint32
        m_axis_tlast                      :   OUT   std_logic;
        m_axis_tuser                      :   OUT   std_logic
        );
END psd_src_PSD_Calculation;


ARCHITECTURE rtl OF psd_src_PSD_Calculation IS

  -- Component Declarations
  COMPONENT psd_src_nfp_wire_single
    PORT( nfp_in                          :   IN    std_logic_vector(31 DOWNTO 0);  -- uint32
          nfp_out                         :   OUT   std_logic_vector(31 DOWNTO 0)  -- single
          );
  END COMPONENT;

  COMPONENT psd_src_nfp_mul_single
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          nfp_in1                         :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          nfp_in2                         :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          nfp_out                         :   OUT   std_logic_vector(31 DOWNTO 0)  -- single
          );
  END COMPONENT;

  COMPONENT psd_src_nfp_log10_single
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          nfp_in                          :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          nfp_out                         :   OUT   std_logic_vector(31 DOWNTO 0)  -- single
          );
  END COMPONENT;

  COMPONENT psd_src_nfp_wire_single_block
    PORT( nfp_in                          :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          nfp_out                         :   OUT   std_logic_vector(31 DOWNTO 0)  -- uint32
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : psd_src_nfp_wire_single
    USE ENTITY work.psd_src_nfp_wire_single(rtl);

  FOR ALL : psd_src_nfp_mul_single
    USE ENTITY work.psd_src_nfp_mul_single(rtl);

  FOR ALL : psd_src_nfp_log10_single
    USE ENTITY work.psd_src_nfp_log10_single(rtl);

  FOR ALL : psd_src_nfp_wire_single_block
    USE ENTITY work.psd_src_nfp_wire_single_block(rtl);

  -- Signals
  SIGNAL enb                              : std_logic;
  SIGNAL delayMatch3_reg                  : std_logic_vector(0 TO 50);  -- ufix1 [51]
  SIGNAL delayMatch3_reg_next             : std_logic_vector(0 TO 50);  -- ufix1 [51]
  SIGNAL s_axis_tvalid_1                  : std_logic;
  SIGNAL kconst                           : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL output_selection_unsigned        : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Bit_Slice_out1                   : std_logic;  -- ufix1
  SIGNAL delayMatch1_reg                  : std_logic_vector(0 TO 15);  -- ufix1 [16]
  SIGNAL delayMatch1_reg_next             : std_logic_vector(0 TO 15);  -- ufix1 [16]
  SIGNAL Bit_Slice_out1_1                 : std_logic;  -- ufix1
  SIGNAL Float_Typecast_out1              : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Float_Typecast2_out1             : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Product_out1                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL delayMatch2_reg                  : vector_of_std_logic_vector32(0 TO 7);  -- ufix32 [8]
  SIGNAL delayMatch2_reg_next             : vector_of_std_logic_vector32(0 TO 7);  -- ufix32 [8]
  SIGNAL Product_out1_1                   : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Float_Typecast1_out1             : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL delayMatch_reg                   : vector_of_std_logic_vector32(0 TO 7);  -- ufix32 [8]
  SIGNAL delayMatch_reg_next              : vector_of_std_logic_vector32(0 TO 7);  -- ufix32 [8]
  SIGNAL Float_Typecast1_out1_1           : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Product1_out1                    : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Multiport_Switch_out1            : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Log10_out1                       : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Gain_out1                        : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Float_Typecast3_out1             : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL delayMatch4_reg                  : std_logic_vector(0 TO 50);  -- ufix1 [51]
  SIGNAL delayMatch4_reg_next             : std_logic_vector(0 TO 50);  -- ufix1 [51]
  SIGNAL s_axis_tlast_1                   : std_logic;
  SIGNAL delayMatch5_reg                  : std_logic_vector(0 TO 50);  -- ufix1 [51]
  SIGNAL delayMatch5_reg_next             : std_logic_vector(0 TO 50);  -- ufix1 [51]
  SIGNAL s_axis_tuser_1                   : std_logic;

BEGIN
  u_nfp_wire_single : psd_src_nfp_wire_single
    PORT MAP( nfp_in => window,  -- uint32
              nfp_out => Float_Typecast_out1  -- single
              );

  u_nfp_wire_single_1 : psd_src_nfp_wire_single
    PORT MAP( nfp_in => s_axis_tdata,  -- uint32
              nfp_out => Float_Typecast2_out1  -- single
              );

  u_nfp_mul_comp : psd_src_nfp_mul_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in1 => Float_Typecast_out1,  -- single
              nfp_in2 => Float_Typecast2_out1,  -- single
              nfp_out => Product_out1  -- single
              );

  u_nfp_wire_single_2 : psd_src_nfp_wire_single
    PORT MAP( nfp_in => rbw,  -- uint32
              nfp_out => Float_Typecast1_out1  -- single
              );

  u_nfp_mul_comp_1 : psd_src_nfp_mul_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in1 => Float_Typecast1_out1_1,  -- single
              nfp_in2 => Product_out1,  -- single
              nfp_out => Product1_out1  -- single
              );

  u_nfp_log10_comp : psd_src_nfp_log10_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in => Multiport_Switch_out1,  -- single
              nfp_out => Log10_out1  -- single
              );

  u_nfp_mul_comp_2 : psd_src_nfp_mul_single
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              nfp_in1 => kconst,  -- single
              nfp_in2 => Log10_out1,  -- single
              nfp_out => Gain_out1  -- single
              );

  u_nfp_wire_single_3 : psd_src_nfp_wire_single_block
    PORT MAP( nfp_in => Gain_out1,  -- single
              nfp_out => Float_Typecast3_out1  -- uint32
              );

  enb <= clk_enable;

  delayMatch3_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch3_reg(0) <= '0';
      delayMatch3_reg(1) <= '0';
      delayMatch3_reg(2) <= '0';
      delayMatch3_reg(3) <= '0';
      delayMatch3_reg(4) <= '0';
      delayMatch3_reg(5) <= '0';
      delayMatch3_reg(6) <= '0';
      delayMatch3_reg(7) <= '0';
      delayMatch3_reg(8) <= '0';
      delayMatch3_reg(9) <= '0';
      delayMatch3_reg(10) <= '0';
      delayMatch3_reg(11) <= '0';
      delayMatch3_reg(12) <= '0';
      delayMatch3_reg(13) <= '0';
      delayMatch3_reg(14) <= '0';
      delayMatch3_reg(15) <= '0';
      delayMatch3_reg(16) <= '0';
      delayMatch3_reg(17) <= '0';
      delayMatch3_reg(18) <= '0';
      delayMatch3_reg(19) <= '0';
      delayMatch3_reg(20) <= '0';
      delayMatch3_reg(21) <= '0';
      delayMatch3_reg(22) <= '0';
      delayMatch3_reg(23) <= '0';
      delayMatch3_reg(24) <= '0';
      delayMatch3_reg(25) <= '0';
      delayMatch3_reg(26) <= '0';
      delayMatch3_reg(27) <= '0';
      delayMatch3_reg(28) <= '0';
      delayMatch3_reg(29) <= '0';
      delayMatch3_reg(30) <= '0';
      delayMatch3_reg(31) <= '0';
      delayMatch3_reg(32) <= '0';
      delayMatch3_reg(33) <= '0';
      delayMatch3_reg(34) <= '0';
      delayMatch3_reg(35) <= '0';
      delayMatch3_reg(36) <= '0';
      delayMatch3_reg(37) <= '0';
      delayMatch3_reg(38) <= '0';
      delayMatch3_reg(39) <= '0';
      delayMatch3_reg(40) <= '0';
      delayMatch3_reg(41) <= '0';
      delayMatch3_reg(42) <= '0';
      delayMatch3_reg(43) <= '0';
      delayMatch3_reg(44) <= '0';
      delayMatch3_reg(45) <= '0';
      delayMatch3_reg(46) <= '0';
      delayMatch3_reg(47) <= '0';
      delayMatch3_reg(48) <= '0';
      delayMatch3_reg(49) <= '0';
      delayMatch3_reg(50) <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        delayMatch3_reg(0) <= delayMatch3_reg_next(0);
        delayMatch3_reg(1) <= delayMatch3_reg_next(1);
        delayMatch3_reg(2) <= delayMatch3_reg_next(2);
        delayMatch3_reg(3) <= delayMatch3_reg_next(3);
        delayMatch3_reg(4) <= delayMatch3_reg_next(4);
        delayMatch3_reg(5) <= delayMatch3_reg_next(5);
        delayMatch3_reg(6) <= delayMatch3_reg_next(6);
        delayMatch3_reg(7) <= delayMatch3_reg_next(7);
        delayMatch3_reg(8) <= delayMatch3_reg_next(8);
        delayMatch3_reg(9) <= delayMatch3_reg_next(9);
        delayMatch3_reg(10) <= delayMatch3_reg_next(10);
        delayMatch3_reg(11) <= delayMatch3_reg_next(11);
        delayMatch3_reg(12) <= delayMatch3_reg_next(12);
        delayMatch3_reg(13) <= delayMatch3_reg_next(13);
        delayMatch3_reg(14) <= delayMatch3_reg_next(14);
        delayMatch3_reg(15) <= delayMatch3_reg_next(15);
        delayMatch3_reg(16) <= delayMatch3_reg_next(16);
        delayMatch3_reg(17) <= delayMatch3_reg_next(17);
        delayMatch3_reg(18) <= delayMatch3_reg_next(18);
        delayMatch3_reg(19) <= delayMatch3_reg_next(19);
        delayMatch3_reg(20) <= delayMatch3_reg_next(20);
        delayMatch3_reg(21) <= delayMatch3_reg_next(21);
        delayMatch3_reg(22) <= delayMatch3_reg_next(22);
        delayMatch3_reg(23) <= delayMatch3_reg_next(23);
        delayMatch3_reg(24) <= delayMatch3_reg_next(24);
        delayMatch3_reg(25) <= delayMatch3_reg_next(25);
        delayMatch3_reg(26) <= delayMatch3_reg_next(26);
        delayMatch3_reg(27) <= delayMatch3_reg_next(27);
        delayMatch3_reg(28) <= delayMatch3_reg_next(28);
        delayMatch3_reg(29) <= delayMatch3_reg_next(29);
        delayMatch3_reg(30) <= delayMatch3_reg_next(30);
        delayMatch3_reg(31) <= delayMatch3_reg_next(31);
        delayMatch3_reg(32) <= delayMatch3_reg_next(32);
        delayMatch3_reg(33) <= delayMatch3_reg_next(33);
        delayMatch3_reg(34) <= delayMatch3_reg_next(34);
        delayMatch3_reg(35) <= delayMatch3_reg_next(35);
        delayMatch3_reg(36) <= delayMatch3_reg_next(36);
        delayMatch3_reg(37) <= delayMatch3_reg_next(37);
        delayMatch3_reg(38) <= delayMatch3_reg_next(38);
        delayMatch3_reg(39) <= delayMatch3_reg_next(39);
        delayMatch3_reg(40) <= delayMatch3_reg_next(40);
        delayMatch3_reg(41) <= delayMatch3_reg_next(41);
        delayMatch3_reg(42) <= delayMatch3_reg_next(42);
        delayMatch3_reg(43) <= delayMatch3_reg_next(43);
        delayMatch3_reg(44) <= delayMatch3_reg_next(44);
        delayMatch3_reg(45) <= delayMatch3_reg_next(45);
        delayMatch3_reg(46) <= delayMatch3_reg_next(46);
        delayMatch3_reg(47) <= delayMatch3_reg_next(47);
        delayMatch3_reg(48) <= delayMatch3_reg_next(48);
        delayMatch3_reg(49) <= delayMatch3_reg_next(49);
        delayMatch3_reg(50) <= delayMatch3_reg_next(50);
      END IF;
    END IF;
  END PROCESS delayMatch3_process;

  s_axis_tvalid_1 <= delayMatch3_reg(50);
  delayMatch3_reg_next(0) <= s_axis_tvalid;
  delayMatch3_reg_next(1) <= delayMatch3_reg(0);
  delayMatch3_reg_next(2) <= delayMatch3_reg(1);
  delayMatch3_reg_next(3) <= delayMatch3_reg(2);
  delayMatch3_reg_next(4) <= delayMatch3_reg(3);
  delayMatch3_reg_next(5) <= delayMatch3_reg(4);
  delayMatch3_reg_next(6) <= delayMatch3_reg(5);
  delayMatch3_reg_next(7) <= delayMatch3_reg(6);
  delayMatch3_reg_next(8) <= delayMatch3_reg(7);
  delayMatch3_reg_next(9) <= delayMatch3_reg(8);
  delayMatch3_reg_next(10) <= delayMatch3_reg(9);
  delayMatch3_reg_next(11) <= delayMatch3_reg(10);
  delayMatch3_reg_next(12) <= delayMatch3_reg(11);
  delayMatch3_reg_next(13) <= delayMatch3_reg(12);
  delayMatch3_reg_next(14) <= delayMatch3_reg(13);
  delayMatch3_reg_next(15) <= delayMatch3_reg(14);
  delayMatch3_reg_next(16) <= delayMatch3_reg(15);
  delayMatch3_reg_next(17) <= delayMatch3_reg(16);
  delayMatch3_reg_next(18) <= delayMatch3_reg(17);
  delayMatch3_reg_next(19) <= delayMatch3_reg(18);
  delayMatch3_reg_next(20) <= delayMatch3_reg(19);
  delayMatch3_reg_next(21) <= delayMatch3_reg(20);
  delayMatch3_reg_next(22) <= delayMatch3_reg(21);
  delayMatch3_reg_next(23) <= delayMatch3_reg(22);
  delayMatch3_reg_next(24) <= delayMatch3_reg(23);
  delayMatch3_reg_next(25) <= delayMatch3_reg(24);
  delayMatch3_reg_next(26) <= delayMatch3_reg(25);
  delayMatch3_reg_next(27) <= delayMatch3_reg(26);
  delayMatch3_reg_next(28) <= delayMatch3_reg(27);
  delayMatch3_reg_next(29) <= delayMatch3_reg(28);
  delayMatch3_reg_next(30) <= delayMatch3_reg(29);
  delayMatch3_reg_next(31) <= delayMatch3_reg(30);
  delayMatch3_reg_next(32) <= delayMatch3_reg(31);
  delayMatch3_reg_next(33) <= delayMatch3_reg(32);
  delayMatch3_reg_next(34) <= delayMatch3_reg(33);
  delayMatch3_reg_next(35) <= delayMatch3_reg(34);
  delayMatch3_reg_next(36) <= delayMatch3_reg(35);
  delayMatch3_reg_next(37) <= delayMatch3_reg(36);
  delayMatch3_reg_next(38) <= delayMatch3_reg(37);
  delayMatch3_reg_next(39) <= delayMatch3_reg(38);
  delayMatch3_reg_next(40) <= delayMatch3_reg(39);
  delayMatch3_reg_next(41) <= delayMatch3_reg(40);
  delayMatch3_reg_next(42) <= delayMatch3_reg(41);
  delayMatch3_reg_next(43) <= delayMatch3_reg(42);
  delayMatch3_reg_next(44) <= delayMatch3_reg(43);
  delayMatch3_reg_next(45) <= delayMatch3_reg(44);
  delayMatch3_reg_next(46) <= delayMatch3_reg(45);
  delayMatch3_reg_next(47) <= delayMatch3_reg(46);
  delayMatch3_reg_next(48) <= delayMatch3_reg(47);
  delayMatch3_reg_next(49) <= delayMatch3_reg(48);
  delayMatch3_reg_next(50) <= delayMatch3_reg(49);

  m_axis_tvalid <= s_axis_tvalid_1;

  kconst <= X"41200000";

  output_selection_unsigned <= unsigned(output_selection);

  Bit_Slice_out1 <= output_selection_unsigned(0);

  delayMatch1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch1_reg(0) <= '0';
      delayMatch1_reg(1) <= '0';
      delayMatch1_reg(2) <= '0';
      delayMatch1_reg(3) <= '0';
      delayMatch1_reg(4) <= '0';
      delayMatch1_reg(5) <= '0';
      delayMatch1_reg(6) <= '0';
      delayMatch1_reg(7) <= '0';
      delayMatch1_reg(8) <= '0';
      delayMatch1_reg(9) <= '0';
      delayMatch1_reg(10) <= '0';
      delayMatch1_reg(11) <= '0';
      delayMatch1_reg(12) <= '0';
      delayMatch1_reg(13) <= '0';
      delayMatch1_reg(14) <= '0';
      delayMatch1_reg(15) <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        delayMatch1_reg(0) <= delayMatch1_reg_next(0);
        delayMatch1_reg(1) <= delayMatch1_reg_next(1);
        delayMatch1_reg(2) <= delayMatch1_reg_next(2);
        delayMatch1_reg(3) <= delayMatch1_reg_next(3);
        delayMatch1_reg(4) <= delayMatch1_reg_next(4);
        delayMatch1_reg(5) <= delayMatch1_reg_next(5);
        delayMatch1_reg(6) <= delayMatch1_reg_next(6);
        delayMatch1_reg(7) <= delayMatch1_reg_next(7);
        delayMatch1_reg(8) <= delayMatch1_reg_next(8);
        delayMatch1_reg(9) <= delayMatch1_reg_next(9);
        delayMatch1_reg(10) <= delayMatch1_reg_next(10);
        delayMatch1_reg(11) <= delayMatch1_reg_next(11);
        delayMatch1_reg(12) <= delayMatch1_reg_next(12);
        delayMatch1_reg(13) <= delayMatch1_reg_next(13);
        delayMatch1_reg(14) <= delayMatch1_reg_next(14);
        delayMatch1_reg(15) <= delayMatch1_reg_next(15);
      END IF;
    END IF;
  END PROCESS delayMatch1_process;

  Bit_Slice_out1_1 <= delayMatch1_reg(15);
  delayMatch1_reg_next(0) <= Bit_Slice_out1;
  delayMatch1_reg_next(1) <= delayMatch1_reg(0);
  delayMatch1_reg_next(2) <= delayMatch1_reg(1);
  delayMatch1_reg_next(3) <= delayMatch1_reg(2);
  delayMatch1_reg_next(4) <= delayMatch1_reg(3);
  delayMatch1_reg_next(5) <= delayMatch1_reg(4);
  delayMatch1_reg_next(6) <= delayMatch1_reg(5);
  delayMatch1_reg_next(7) <= delayMatch1_reg(6);
  delayMatch1_reg_next(8) <= delayMatch1_reg(7);
  delayMatch1_reg_next(9) <= delayMatch1_reg(8);
  delayMatch1_reg_next(10) <= delayMatch1_reg(9);
  delayMatch1_reg_next(11) <= delayMatch1_reg(10);
  delayMatch1_reg_next(12) <= delayMatch1_reg(11);
  delayMatch1_reg_next(13) <= delayMatch1_reg(12);
  delayMatch1_reg_next(14) <= delayMatch1_reg(13);
  delayMatch1_reg_next(15) <= delayMatch1_reg(14);

  delayMatch2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch2_reg(0) <= X"00000000";
      delayMatch2_reg(1) <= X"00000000";
      delayMatch2_reg(2) <= X"00000000";
      delayMatch2_reg(3) <= X"00000000";
      delayMatch2_reg(4) <= X"00000000";
      delayMatch2_reg(5) <= X"00000000";
      delayMatch2_reg(6) <= X"00000000";
      delayMatch2_reg(7) <= X"00000000";
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        delayMatch2_reg(0) <= delayMatch2_reg_next(0);
        delayMatch2_reg(1) <= delayMatch2_reg_next(1);
        delayMatch2_reg(2) <= delayMatch2_reg_next(2);
        delayMatch2_reg(3) <= delayMatch2_reg_next(3);
        delayMatch2_reg(4) <= delayMatch2_reg_next(4);
        delayMatch2_reg(5) <= delayMatch2_reg_next(5);
        delayMatch2_reg(6) <= delayMatch2_reg_next(6);
        delayMatch2_reg(7) <= delayMatch2_reg_next(7);
      END IF;
    END IF;
  END PROCESS delayMatch2_process;

  Product_out1_1 <= delayMatch2_reg(7);
  delayMatch2_reg_next(0) <= Product_out1;
  delayMatch2_reg_next(1) <= delayMatch2_reg(0);
  delayMatch2_reg_next(2) <= delayMatch2_reg(1);
  delayMatch2_reg_next(3) <= delayMatch2_reg(2);
  delayMatch2_reg_next(4) <= delayMatch2_reg(3);
  delayMatch2_reg_next(5) <= delayMatch2_reg(4);
  delayMatch2_reg_next(6) <= delayMatch2_reg(5);
  delayMatch2_reg_next(7) <= delayMatch2_reg(6);

  delayMatch_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch_reg(0) <= X"00000000";
      delayMatch_reg(1) <= X"00000000";
      delayMatch_reg(2) <= X"00000000";
      delayMatch_reg(3) <= X"00000000";
      delayMatch_reg(4) <= X"00000000";
      delayMatch_reg(5) <= X"00000000";
      delayMatch_reg(6) <= X"00000000";
      delayMatch_reg(7) <= X"00000000";
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        delayMatch_reg(0) <= delayMatch_reg_next(0);
        delayMatch_reg(1) <= delayMatch_reg_next(1);
        delayMatch_reg(2) <= delayMatch_reg_next(2);
        delayMatch_reg(3) <= delayMatch_reg_next(3);
        delayMatch_reg(4) <= delayMatch_reg_next(4);
        delayMatch_reg(5) <= delayMatch_reg_next(5);
        delayMatch_reg(6) <= delayMatch_reg_next(6);
        delayMatch_reg(7) <= delayMatch_reg_next(7);
      END IF;
    END IF;
  END PROCESS delayMatch_process;

  Float_Typecast1_out1_1 <= delayMatch_reg(7);
  delayMatch_reg_next(0) <= Float_Typecast1_out1;
  delayMatch_reg_next(1) <= delayMatch_reg(0);
  delayMatch_reg_next(2) <= delayMatch_reg(1);
  delayMatch_reg_next(3) <= delayMatch_reg(2);
  delayMatch_reg_next(4) <= delayMatch_reg(3);
  delayMatch_reg_next(5) <= delayMatch_reg(4);
  delayMatch_reg_next(6) <= delayMatch_reg(5);
  delayMatch_reg_next(7) <= delayMatch_reg(6);

  
  Multiport_Switch_out1 <= Product_out1_1 WHEN Bit_Slice_out1_1 = '0' ELSE
      Product1_out1;

  delayMatch4_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch4_reg(0) <= '0';
      delayMatch4_reg(1) <= '0';
      delayMatch4_reg(2) <= '0';
      delayMatch4_reg(3) <= '0';
      delayMatch4_reg(4) <= '0';
      delayMatch4_reg(5) <= '0';
      delayMatch4_reg(6) <= '0';
      delayMatch4_reg(7) <= '0';
      delayMatch4_reg(8) <= '0';
      delayMatch4_reg(9) <= '0';
      delayMatch4_reg(10) <= '0';
      delayMatch4_reg(11) <= '0';
      delayMatch4_reg(12) <= '0';
      delayMatch4_reg(13) <= '0';
      delayMatch4_reg(14) <= '0';
      delayMatch4_reg(15) <= '0';
      delayMatch4_reg(16) <= '0';
      delayMatch4_reg(17) <= '0';
      delayMatch4_reg(18) <= '0';
      delayMatch4_reg(19) <= '0';
      delayMatch4_reg(20) <= '0';
      delayMatch4_reg(21) <= '0';
      delayMatch4_reg(22) <= '0';
      delayMatch4_reg(23) <= '0';
      delayMatch4_reg(24) <= '0';
      delayMatch4_reg(25) <= '0';
      delayMatch4_reg(26) <= '0';
      delayMatch4_reg(27) <= '0';
      delayMatch4_reg(28) <= '0';
      delayMatch4_reg(29) <= '0';
      delayMatch4_reg(30) <= '0';
      delayMatch4_reg(31) <= '0';
      delayMatch4_reg(32) <= '0';
      delayMatch4_reg(33) <= '0';
      delayMatch4_reg(34) <= '0';
      delayMatch4_reg(35) <= '0';
      delayMatch4_reg(36) <= '0';
      delayMatch4_reg(37) <= '0';
      delayMatch4_reg(38) <= '0';
      delayMatch4_reg(39) <= '0';
      delayMatch4_reg(40) <= '0';
      delayMatch4_reg(41) <= '0';
      delayMatch4_reg(42) <= '0';
      delayMatch4_reg(43) <= '0';
      delayMatch4_reg(44) <= '0';
      delayMatch4_reg(45) <= '0';
      delayMatch4_reg(46) <= '0';
      delayMatch4_reg(47) <= '0';
      delayMatch4_reg(48) <= '0';
      delayMatch4_reg(49) <= '0';
      delayMatch4_reg(50) <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        delayMatch4_reg(0) <= delayMatch4_reg_next(0);
        delayMatch4_reg(1) <= delayMatch4_reg_next(1);
        delayMatch4_reg(2) <= delayMatch4_reg_next(2);
        delayMatch4_reg(3) <= delayMatch4_reg_next(3);
        delayMatch4_reg(4) <= delayMatch4_reg_next(4);
        delayMatch4_reg(5) <= delayMatch4_reg_next(5);
        delayMatch4_reg(6) <= delayMatch4_reg_next(6);
        delayMatch4_reg(7) <= delayMatch4_reg_next(7);
        delayMatch4_reg(8) <= delayMatch4_reg_next(8);
        delayMatch4_reg(9) <= delayMatch4_reg_next(9);
        delayMatch4_reg(10) <= delayMatch4_reg_next(10);
        delayMatch4_reg(11) <= delayMatch4_reg_next(11);
        delayMatch4_reg(12) <= delayMatch4_reg_next(12);
        delayMatch4_reg(13) <= delayMatch4_reg_next(13);
        delayMatch4_reg(14) <= delayMatch4_reg_next(14);
        delayMatch4_reg(15) <= delayMatch4_reg_next(15);
        delayMatch4_reg(16) <= delayMatch4_reg_next(16);
        delayMatch4_reg(17) <= delayMatch4_reg_next(17);
        delayMatch4_reg(18) <= delayMatch4_reg_next(18);
        delayMatch4_reg(19) <= delayMatch4_reg_next(19);
        delayMatch4_reg(20) <= delayMatch4_reg_next(20);
        delayMatch4_reg(21) <= delayMatch4_reg_next(21);
        delayMatch4_reg(22) <= delayMatch4_reg_next(22);
        delayMatch4_reg(23) <= delayMatch4_reg_next(23);
        delayMatch4_reg(24) <= delayMatch4_reg_next(24);
        delayMatch4_reg(25) <= delayMatch4_reg_next(25);
        delayMatch4_reg(26) <= delayMatch4_reg_next(26);
        delayMatch4_reg(27) <= delayMatch4_reg_next(27);
        delayMatch4_reg(28) <= delayMatch4_reg_next(28);
        delayMatch4_reg(29) <= delayMatch4_reg_next(29);
        delayMatch4_reg(30) <= delayMatch4_reg_next(30);
        delayMatch4_reg(31) <= delayMatch4_reg_next(31);
        delayMatch4_reg(32) <= delayMatch4_reg_next(32);
        delayMatch4_reg(33) <= delayMatch4_reg_next(33);
        delayMatch4_reg(34) <= delayMatch4_reg_next(34);
        delayMatch4_reg(35) <= delayMatch4_reg_next(35);
        delayMatch4_reg(36) <= delayMatch4_reg_next(36);
        delayMatch4_reg(37) <= delayMatch4_reg_next(37);
        delayMatch4_reg(38) <= delayMatch4_reg_next(38);
        delayMatch4_reg(39) <= delayMatch4_reg_next(39);
        delayMatch4_reg(40) <= delayMatch4_reg_next(40);
        delayMatch4_reg(41) <= delayMatch4_reg_next(41);
        delayMatch4_reg(42) <= delayMatch4_reg_next(42);
        delayMatch4_reg(43) <= delayMatch4_reg_next(43);
        delayMatch4_reg(44) <= delayMatch4_reg_next(44);
        delayMatch4_reg(45) <= delayMatch4_reg_next(45);
        delayMatch4_reg(46) <= delayMatch4_reg_next(46);
        delayMatch4_reg(47) <= delayMatch4_reg_next(47);
        delayMatch4_reg(48) <= delayMatch4_reg_next(48);
        delayMatch4_reg(49) <= delayMatch4_reg_next(49);
        delayMatch4_reg(50) <= delayMatch4_reg_next(50);
      END IF;
    END IF;
  END PROCESS delayMatch4_process;

  s_axis_tlast_1 <= delayMatch4_reg(50);
  delayMatch4_reg_next(0) <= s_axis_tlast;
  delayMatch4_reg_next(1) <= delayMatch4_reg(0);
  delayMatch4_reg_next(2) <= delayMatch4_reg(1);
  delayMatch4_reg_next(3) <= delayMatch4_reg(2);
  delayMatch4_reg_next(4) <= delayMatch4_reg(3);
  delayMatch4_reg_next(5) <= delayMatch4_reg(4);
  delayMatch4_reg_next(6) <= delayMatch4_reg(5);
  delayMatch4_reg_next(7) <= delayMatch4_reg(6);
  delayMatch4_reg_next(8) <= delayMatch4_reg(7);
  delayMatch4_reg_next(9) <= delayMatch4_reg(8);
  delayMatch4_reg_next(10) <= delayMatch4_reg(9);
  delayMatch4_reg_next(11) <= delayMatch4_reg(10);
  delayMatch4_reg_next(12) <= delayMatch4_reg(11);
  delayMatch4_reg_next(13) <= delayMatch4_reg(12);
  delayMatch4_reg_next(14) <= delayMatch4_reg(13);
  delayMatch4_reg_next(15) <= delayMatch4_reg(14);
  delayMatch4_reg_next(16) <= delayMatch4_reg(15);
  delayMatch4_reg_next(17) <= delayMatch4_reg(16);
  delayMatch4_reg_next(18) <= delayMatch4_reg(17);
  delayMatch4_reg_next(19) <= delayMatch4_reg(18);
  delayMatch4_reg_next(20) <= delayMatch4_reg(19);
  delayMatch4_reg_next(21) <= delayMatch4_reg(20);
  delayMatch4_reg_next(22) <= delayMatch4_reg(21);
  delayMatch4_reg_next(23) <= delayMatch4_reg(22);
  delayMatch4_reg_next(24) <= delayMatch4_reg(23);
  delayMatch4_reg_next(25) <= delayMatch4_reg(24);
  delayMatch4_reg_next(26) <= delayMatch4_reg(25);
  delayMatch4_reg_next(27) <= delayMatch4_reg(26);
  delayMatch4_reg_next(28) <= delayMatch4_reg(27);
  delayMatch4_reg_next(29) <= delayMatch4_reg(28);
  delayMatch4_reg_next(30) <= delayMatch4_reg(29);
  delayMatch4_reg_next(31) <= delayMatch4_reg(30);
  delayMatch4_reg_next(32) <= delayMatch4_reg(31);
  delayMatch4_reg_next(33) <= delayMatch4_reg(32);
  delayMatch4_reg_next(34) <= delayMatch4_reg(33);
  delayMatch4_reg_next(35) <= delayMatch4_reg(34);
  delayMatch4_reg_next(36) <= delayMatch4_reg(35);
  delayMatch4_reg_next(37) <= delayMatch4_reg(36);
  delayMatch4_reg_next(38) <= delayMatch4_reg(37);
  delayMatch4_reg_next(39) <= delayMatch4_reg(38);
  delayMatch4_reg_next(40) <= delayMatch4_reg(39);
  delayMatch4_reg_next(41) <= delayMatch4_reg(40);
  delayMatch4_reg_next(42) <= delayMatch4_reg(41);
  delayMatch4_reg_next(43) <= delayMatch4_reg(42);
  delayMatch4_reg_next(44) <= delayMatch4_reg(43);
  delayMatch4_reg_next(45) <= delayMatch4_reg(44);
  delayMatch4_reg_next(46) <= delayMatch4_reg(45);
  delayMatch4_reg_next(47) <= delayMatch4_reg(46);
  delayMatch4_reg_next(48) <= delayMatch4_reg(47);
  delayMatch4_reg_next(49) <= delayMatch4_reg(48);
  delayMatch4_reg_next(50) <= delayMatch4_reg(49);

  m_axis_tlast <= s_axis_tlast_1;

  delayMatch5_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch5_reg(0) <= '0';
      delayMatch5_reg(1) <= '0';
      delayMatch5_reg(2) <= '0';
      delayMatch5_reg(3) <= '0';
      delayMatch5_reg(4) <= '0';
      delayMatch5_reg(5) <= '0';
      delayMatch5_reg(6) <= '0';
      delayMatch5_reg(7) <= '0';
      delayMatch5_reg(8) <= '0';
      delayMatch5_reg(9) <= '0';
      delayMatch5_reg(10) <= '0';
      delayMatch5_reg(11) <= '0';
      delayMatch5_reg(12) <= '0';
      delayMatch5_reg(13) <= '0';
      delayMatch5_reg(14) <= '0';
      delayMatch5_reg(15) <= '0';
      delayMatch5_reg(16) <= '0';
      delayMatch5_reg(17) <= '0';
      delayMatch5_reg(18) <= '0';
      delayMatch5_reg(19) <= '0';
      delayMatch5_reg(20) <= '0';
      delayMatch5_reg(21) <= '0';
      delayMatch5_reg(22) <= '0';
      delayMatch5_reg(23) <= '0';
      delayMatch5_reg(24) <= '0';
      delayMatch5_reg(25) <= '0';
      delayMatch5_reg(26) <= '0';
      delayMatch5_reg(27) <= '0';
      delayMatch5_reg(28) <= '0';
      delayMatch5_reg(29) <= '0';
      delayMatch5_reg(30) <= '0';
      delayMatch5_reg(31) <= '0';
      delayMatch5_reg(32) <= '0';
      delayMatch5_reg(33) <= '0';
      delayMatch5_reg(34) <= '0';
      delayMatch5_reg(35) <= '0';
      delayMatch5_reg(36) <= '0';
      delayMatch5_reg(37) <= '0';
      delayMatch5_reg(38) <= '0';
      delayMatch5_reg(39) <= '0';
      delayMatch5_reg(40) <= '0';
      delayMatch5_reg(41) <= '0';
      delayMatch5_reg(42) <= '0';
      delayMatch5_reg(43) <= '0';
      delayMatch5_reg(44) <= '0';
      delayMatch5_reg(45) <= '0';
      delayMatch5_reg(46) <= '0';
      delayMatch5_reg(47) <= '0';
      delayMatch5_reg(48) <= '0';
      delayMatch5_reg(49) <= '0';
      delayMatch5_reg(50) <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        delayMatch5_reg(0) <= delayMatch5_reg_next(0);
        delayMatch5_reg(1) <= delayMatch5_reg_next(1);
        delayMatch5_reg(2) <= delayMatch5_reg_next(2);
        delayMatch5_reg(3) <= delayMatch5_reg_next(3);
        delayMatch5_reg(4) <= delayMatch5_reg_next(4);
        delayMatch5_reg(5) <= delayMatch5_reg_next(5);
        delayMatch5_reg(6) <= delayMatch5_reg_next(6);
        delayMatch5_reg(7) <= delayMatch5_reg_next(7);
        delayMatch5_reg(8) <= delayMatch5_reg_next(8);
        delayMatch5_reg(9) <= delayMatch5_reg_next(9);
        delayMatch5_reg(10) <= delayMatch5_reg_next(10);
        delayMatch5_reg(11) <= delayMatch5_reg_next(11);
        delayMatch5_reg(12) <= delayMatch5_reg_next(12);
        delayMatch5_reg(13) <= delayMatch5_reg_next(13);
        delayMatch5_reg(14) <= delayMatch5_reg_next(14);
        delayMatch5_reg(15) <= delayMatch5_reg_next(15);
        delayMatch5_reg(16) <= delayMatch5_reg_next(16);
        delayMatch5_reg(17) <= delayMatch5_reg_next(17);
        delayMatch5_reg(18) <= delayMatch5_reg_next(18);
        delayMatch5_reg(19) <= delayMatch5_reg_next(19);
        delayMatch5_reg(20) <= delayMatch5_reg_next(20);
        delayMatch5_reg(21) <= delayMatch5_reg_next(21);
        delayMatch5_reg(22) <= delayMatch5_reg_next(22);
        delayMatch5_reg(23) <= delayMatch5_reg_next(23);
        delayMatch5_reg(24) <= delayMatch5_reg_next(24);
        delayMatch5_reg(25) <= delayMatch5_reg_next(25);
        delayMatch5_reg(26) <= delayMatch5_reg_next(26);
        delayMatch5_reg(27) <= delayMatch5_reg_next(27);
        delayMatch5_reg(28) <= delayMatch5_reg_next(28);
        delayMatch5_reg(29) <= delayMatch5_reg_next(29);
        delayMatch5_reg(30) <= delayMatch5_reg_next(30);
        delayMatch5_reg(31) <= delayMatch5_reg_next(31);
        delayMatch5_reg(32) <= delayMatch5_reg_next(32);
        delayMatch5_reg(33) <= delayMatch5_reg_next(33);
        delayMatch5_reg(34) <= delayMatch5_reg_next(34);
        delayMatch5_reg(35) <= delayMatch5_reg_next(35);
        delayMatch5_reg(36) <= delayMatch5_reg_next(36);
        delayMatch5_reg(37) <= delayMatch5_reg_next(37);
        delayMatch5_reg(38) <= delayMatch5_reg_next(38);
        delayMatch5_reg(39) <= delayMatch5_reg_next(39);
        delayMatch5_reg(40) <= delayMatch5_reg_next(40);
        delayMatch5_reg(41) <= delayMatch5_reg_next(41);
        delayMatch5_reg(42) <= delayMatch5_reg_next(42);
        delayMatch5_reg(43) <= delayMatch5_reg_next(43);
        delayMatch5_reg(44) <= delayMatch5_reg_next(44);
        delayMatch5_reg(45) <= delayMatch5_reg_next(45);
        delayMatch5_reg(46) <= delayMatch5_reg_next(46);
        delayMatch5_reg(47) <= delayMatch5_reg_next(47);
        delayMatch5_reg(48) <= delayMatch5_reg_next(48);
        delayMatch5_reg(49) <= delayMatch5_reg_next(49);
        delayMatch5_reg(50) <= delayMatch5_reg_next(50);
      END IF;
    END IF;
  END PROCESS delayMatch5_process;

  s_axis_tuser_1 <= delayMatch5_reg(50);
  delayMatch5_reg_next(0) <= s_axis_tuser;
  delayMatch5_reg_next(1) <= delayMatch5_reg(0);
  delayMatch5_reg_next(2) <= delayMatch5_reg(1);
  delayMatch5_reg_next(3) <= delayMatch5_reg(2);
  delayMatch5_reg_next(4) <= delayMatch5_reg(3);
  delayMatch5_reg_next(5) <= delayMatch5_reg(4);
  delayMatch5_reg_next(6) <= delayMatch5_reg(5);
  delayMatch5_reg_next(7) <= delayMatch5_reg(6);
  delayMatch5_reg_next(8) <= delayMatch5_reg(7);
  delayMatch5_reg_next(9) <= delayMatch5_reg(8);
  delayMatch5_reg_next(10) <= delayMatch5_reg(9);
  delayMatch5_reg_next(11) <= delayMatch5_reg(10);
  delayMatch5_reg_next(12) <= delayMatch5_reg(11);
  delayMatch5_reg_next(13) <= delayMatch5_reg(12);
  delayMatch5_reg_next(14) <= delayMatch5_reg(13);
  delayMatch5_reg_next(15) <= delayMatch5_reg(14);
  delayMatch5_reg_next(16) <= delayMatch5_reg(15);
  delayMatch5_reg_next(17) <= delayMatch5_reg(16);
  delayMatch5_reg_next(18) <= delayMatch5_reg(17);
  delayMatch5_reg_next(19) <= delayMatch5_reg(18);
  delayMatch5_reg_next(20) <= delayMatch5_reg(19);
  delayMatch5_reg_next(21) <= delayMatch5_reg(20);
  delayMatch5_reg_next(22) <= delayMatch5_reg(21);
  delayMatch5_reg_next(23) <= delayMatch5_reg(22);
  delayMatch5_reg_next(24) <= delayMatch5_reg(23);
  delayMatch5_reg_next(25) <= delayMatch5_reg(24);
  delayMatch5_reg_next(26) <= delayMatch5_reg(25);
  delayMatch5_reg_next(27) <= delayMatch5_reg(26);
  delayMatch5_reg_next(28) <= delayMatch5_reg(27);
  delayMatch5_reg_next(29) <= delayMatch5_reg(28);
  delayMatch5_reg_next(30) <= delayMatch5_reg(29);
  delayMatch5_reg_next(31) <= delayMatch5_reg(30);
  delayMatch5_reg_next(32) <= delayMatch5_reg(31);
  delayMatch5_reg_next(33) <= delayMatch5_reg(32);
  delayMatch5_reg_next(34) <= delayMatch5_reg(33);
  delayMatch5_reg_next(35) <= delayMatch5_reg(34);
  delayMatch5_reg_next(36) <= delayMatch5_reg(35);
  delayMatch5_reg_next(37) <= delayMatch5_reg(36);
  delayMatch5_reg_next(38) <= delayMatch5_reg(37);
  delayMatch5_reg_next(39) <= delayMatch5_reg(38);
  delayMatch5_reg_next(40) <= delayMatch5_reg(39);
  delayMatch5_reg_next(41) <= delayMatch5_reg(40);
  delayMatch5_reg_next(42) <= delayMatch5_reg(41);
  delayMatch5_reg_next(43) <= delayMatch5_reg(42);
  delayMatch5_reg_next(44) <= delayMatch5_reg(43);
  delayMatch5_reg_next(45) <= delayMatch5_reg(44);
  delayMatch5_reg_next(46) <= delayMatch5_reg(45);
  delayMatch5_reg_next(47) <= delayMatch5_reg(46);
  delayMatch5_reg_next(48) <= delayMatch5_reg(47);
  delayMatch5_reg_next(49) <= delayMatch5_reg(48);
  delayMatch5_reg_next(50) <= delayMatch5_reg(49);

  m_axis_tuser <= s_axis_tuser_1;

  ce_out <= clk_enable;

  m_axis_tdata <= Float_Typecast3_out1;

END rtl;

