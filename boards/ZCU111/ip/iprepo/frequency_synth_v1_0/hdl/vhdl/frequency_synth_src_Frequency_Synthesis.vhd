-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\frequency_synth\frequency_synth_src_Frequency_Synthesis.vhd
-- Created: 2020-10-19 10:03:31
-- 
-- Generated by MATLAB 9.8 and HDL Coder 3.16
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Model base rate: 3.90625e-09
-- Target subsystem base rate: 3.90625e-09
-- 
-- 
-- Clock Enable  Sample Time
-- -------------------------------------------------------------
-- ce_out        3.90625e-09
-- -------------------------------------------------------------
-- 
-- 
-- Output Signal                 Clock Enable  Sample Time
-- -------------------------------------------------------------
-- Valid_NCO_0                   ce_out        3.90625e-09
-- Data_NCO_0                    ce_out        3.90625e-09
-- Valid_NCO_1                   ce_out        3.90625e-09
-- Data_NCO_1                    ce_out        3.90625e-09
-- Valid_NCO_2                   ce_out        3.90625e-09
-- Data_NCO_2                    ce_out        3.90625e-09
-- Valid_NCO_3                   ce_out        3.90625e-09
-- Data_NCO_3                    ce_out        3.90625e-09
-- -------------------------------------------------------------
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: frequency_synth_src_Frequency_Synthesis
-- Source Path: frequency_synth/Frequency Synthesis
-- Hierarchy Level: 0
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.frequency_synth_src_Frequency_Synthesis_pkg.ALL;

ENTITY frequency_synth_src_Frequency_Synthesis IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        clk_enable                        :   IN    std_logic;
        Constant_rsvd                     :   IN    std_logic_vector(31 DOWNTO 0);  -- uint32
        Enable_NCO_0                      :   IN    std_logic;
        Enable_NCO_1                      :   IN    std_logic;
        Enable_NCO_2                      :   IN    std_logic;
        Enable_NCO_3                      :   IN    std_logic;
        Gain_NCO_0                        :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
        Gain_NCO_1                        :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
        Gain_NCO_2                        :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
        Gain_NCO_3                        :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
        Step_Size_0                       :   IN    std_logic_vector(31 DOWNTO 0);  -- uint32
        Step_Size_1                       :   IN    std_logic_vector(31 DOWNTO 0);  -- uint32
        Step_Size_2                       :   IN    std_logic_vector(31 DOWNTO 0);  -- uint32
        Step_Size_3                       :   IN    std_logic_vector(31 DOWNTO 0);  -- uint32
        ce_out                            :   OUT   std_logic;
        Valid_NCO_0                       :   OUT   std_logic;
        Data_NCO_0                        :   OUT   std_logic_vector(127 DOWNTO 0);  -- ufix128
        Valid_NCO_1                       :   OUT   std_logic;
        Data_NCO_1                        :   OUT   std_logic_vector(127 DOWNTO 0);  -- ufix128
        Valid_NCO_2                       :   OUT   std_logic;
        Data_NCO_2                        :   OUT   std_logic_vector(127 DOWNTO 0);  -- ufix128
        Valid_NCO_3                       :   OUT   std_logic;
        Data_NCO_3                        :   OUT   std_logic_vector(127 DOWNTO 0)  -- ufix128
        );
END frequency_synth_src_Frequency_Synthesis;


ARCHITECTURE rtl OF frequency_synth_src_Frequency_Synthesis IS

  -- Component Declarations
  COMPONENT frequency_synth_src_NCO_Generator_0
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          Step_Size                       :   IN    std_logic_vector(31 DOWNTO 0);  -- uint32
          Enable                          :   IN    std_logic;
          Valid_Out                       :   OUT   std_logic;
          Signal_re                       :   OUT   vector_of_std_logic_vector16(0 TO 3);  -- sfix16_En15 [4]
          Signal_im                       :   OUT   vector_of_std_logic_vector16(0 TO 3)  -- sfix16_En15 [4]
          );
  END COMPONENT;

  COMPONENT frequency_synth_src_Convert_to_SSR_0
    PORT( Signal_re                       :   IN    vector_of_std_logic_vector16(0 TO 3);  -- sfix16_En15 [4]
          Signal_im                       :   IN    vector_of_std_logic_vector16(0 TO 3);  -- sfix16_En15 [4]
          SSR                             :   OUT   std_logic_vector(127 DOWNTO 0)  -- ufix128
          );
  END COMPONENT;

  COMPONENT frequency_synth_src_NCO_Generator_1
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          Step_Size                       :   IN    std_logic_vector(31 DOWNTO 0);  -- uint32
          Enable                          :   IN    std_logic;
          Valid_Out                       :   OUT   std_logic;
          Signal_re                       :   OUT   vector_of_std_logic_vector16(0 TO 3);  -- sfix16_En15 [4]
          Signal_im                       :   OUT   vector_of_std_logic_vector16(0 TO 3)  -- sfix16_En15 [4]
          );
  END COMPONENT;

  COMPONENT frequency_synth_src_Convert_to_SSR_1
    PORT( Signal_re                       :   IN    vector_of_std_logic_vector16(0 TO 3);  -- sfix16_En15 [4]
          Signal_im                       :   IN    vector_of_std_logic_vector16(0 TO 3);  -- sfix16_En15 [4]
          SSR                             :   OUT   std_logic_vector(127 DOWNTO 0)  -- ufix128
          );
  END COMPONENT;

  COMPONENT frequency_synth_src_NCO_Generator_2
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          Step_Size                       :   IN    std_logic_vector(31 DOWNTO 0);  -- uint32
          Enable                          :   IN    std_logic;
          Valid_Out                       :   OUT   std_logic;
          Signal_re                       :   OUT   vector_of_std_logic_vector16(0 TO 3);  -- sfix16_En15 [4]
          Signal_im                       :   OUT   vector_of_std_logic_vector16(0 TO 3)  -- sfix16_En15 [4]
          );
  END COMPONENT;

  COMPONENT frequency_synth_src_Convert_to_SSR_2
    PORT( Signal_re                       :   IN    vector_of_std_logic_vector16(0 TO 3);  -- sfix16_En15 [4]
          Signal_im                       :   IN    vector_of_std_logic_vector16(0 TO 3);  -- sfix16_En15 [4]
          SSR                             :   OUT   std_logic_vector(127 DOWNTO 0)  -- ufix128
          );
  END COMPONENT;

  COMPONENT frequency_synth_src_NCO_Generator_3
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          enb                             :   IN    std_logic;
          Step_Size                       :   IN    std_logic_vector(31 DOWNTO 0);  -- uint32
          Enable                          :   IN    std_logic;
          Valid_Out                       :   OUT   std_logic;
          Signal_re                       :   OUT   vector_of_std_logic_vector16(0 TO 3);  -- sfix16_En15 [4]
          Signal_im                       :   OUT   vector_of_std_logic_vector16(0 TO 3)  -- sfix16_En15 [4]
          );
  END COMPONENT;

  COMPONENT frequency_synth_src_Convert_to_SSR_3
    PORT( Signal_re                       :   IN    vector_of_std_logic_vector16(0 TO 3);  -- sfix16_En15 [4]
          Signal_im                       :   IN    vector_of_std_logic_vector16(0 TO 3);  -- sfix16_En15 [4]
          SSR                             :   OUT   std_logic_vector(127 DOWNTO 0)  -- ufix128
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : frequency_synth_src_NCO_Generator_0
    USE ENTITY work.frequency_synth_src_NCO_Generator_0(rtl);

  FOR ALL : frequency_synth_src_Convert_to_SSR_0
    USE ENTITY work.frequency_synth_src_Convert_to_SSR_0(rtl);

  FOR ALL : frequency_synth_src_NCO_Generator_1
    USE ENTITY work.frequency_synth_src_NCO_Generator_1(rtl);

  FOR ALL : frequency_synth_src_Convert_to_SSR_1
    USE ENTITY work.frequency_synth_src_Convert_to_SSR_1(rtl);

  FOR ALL : frequency_synth_src_NCO_Generator_2
    USE ENTITY work.frequency_synth_src_NCO_Generator_2(rtl);

  FOR ALL : frequency_synth_src_Convert_to_SSR_2
    USE ENTITY work.frequency_synth_src_Convert_to_SSR_2(rtl);

  FOR ALL : frequency_synth_src_NCO_Generator_3
    USE ENTITY work.frequency_synth_src_NCO_Generator_3(rtl);

  FOR ALL : frequency_synth_src_Convert_to_SSR_3
    USE ENTITY work.frequency_synth_src_Convert_to_SSR_3(rtl);

  -- Signals
  SIGNAL NCO_Generator_0_out1             : std_logic;
  SIGNAL NCO_Generator_0_out2_re          : vector_of_std_logic_vector16(0 TO 3);  -- ufix16 [4]
  SIGNAL NCO_Generator_0_out2_im          : vector_of_std_logic_vector16(0 TO 3);  -- ufix16 [4]
  SIGNAL Constant_unsigned                : unsigned(31 DOWNTO 0);  -- uint32
  SIGNAL Bit_Slice_out1                   : std_logic;  -- ufix1
  SIGNAL Enable                           : vector_of_signed16(0 TO 3);  -- sfix16_En15 [4]
  SIGNAL Enable_1                         : vector_of_signed16(0 TO 3);  -- sfix16_En15 [4]
  SIGNAL Gain_NCO_0_signed                : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL NCO_Generator_0_out2_re_signed   : vector_of_signed16(0 TO 3);  -- sfix16_En15 [4]
  SIGNAL NCO_Generator_0_out2_im_signed   : vector_of_signed16(0 TO 3);  -- sfix16_En15 [4]
  SIGNAL Product_mul_temp                 : vector_of_signed32(0 TO 3);  -- sfix32_En29 [4]
  SIGNAL Product_mul_temp_1               : vector_of_signed32(0 TO 3);  -- sfix32_En29 [4]
  SIGNAL Product_out1_re                  : vector_of_signed16(0 TO 3);  -- sfix16_En15 [4]
  SIGNAL Product_out1_im                  : vector_of_signed16(0 TO 3);  -- sfix16_En15 [4]
  SIGNAL Multiport_Switch_out1_re         : vector_of_signed16(0 TO 3);  -- sfix16_En15 [4]
  SIGNAL Multiport_Switch_out1_im         : vector_of_signed16(0 TO 3);  -- sfix16_En15 [4]
  SIGNAL Multiport_Switch3_out1_re        : vector_of_signed16(0 TO 3);  -- sfix16_En15 [4]
  SIGNAL Multiport_Switch3_out1_im        : vector_of_signed16(0 TO 3);  -- sfix16_En15 [4]
  SIGNAL Multiport_Switch3_out1_re_1      : vector_of_std_logic_vector16(0 TO 3);  -- ufix16 [4]
  SIGNAL Multiport_Switch3_out1_im_1      : vector_of_std_logic_vector16(0 TO 3);  -- ufix16 [4]
  SIGNAL y                                : std_logic_vector(127 DOWNTO 0);  -- ufix128
  SIGNAL NCO_Generator_1_out1             : std_logic;
  SIGNAL NCO_Generator_1_out2_re          : vector_of_std_logic_vector16(0 TO 3);  -- ufix16 [4]
  SIGNAL NCO_Generator_1_out2_im          : vector_of_std_logic_vector16(0 TO 3);  -- ufix16 [4]
  SIGNAL Bit_Slice1_out1                  : std_logic;  -- ufix1
  SIGNAL Gain_NCO_1_signed                : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL NCO_Generator_1_out2_re_signed   : vector_of_signed16(0 TO 3);  -- sfix16_En15 [4]
  SIGNAL NCO_Generator_1_out2_im_signed   : vector_of_signed16(0 TO 3);  -- sfix16_En15 [4]
  SIGNAL Product1_mul_temp                : vector_of_signed32(0 TO 3);  -- sfix32_En29 [4]
  SIGNAL Product1_mul_temp_1              : vector_of_signed32(0 TO 3);  -- sfix32_En29 [4]
  SIGNAL Product1_out1_re                 : vector_of_signed16(0 TO 3);  -- sfix16_En15 [4]
  SIGNAL Product1_out1_im                 : vector_of_signed16(0 TO 3);  -- sfix16_En15 [4]
  SIGNAL Multiport_Switch4_out1_re        : vector_of_signed16(0 TO 3);  -- sfix16_En15 [4]
  SIGNAL Multiport_Switch4_out1_im        : vector_of_signed16(0 TO 3);  -- sfix16_En15 [4]
  SIGNAL Multiport_Switch5_out1_re        : vector_of_signed16(0 TO 3);  -- sfix16_En15 [4]
  SIGNAL Multiport_Switch5_out1_im        : vector_of_signed16(0 TO 3);  -- sfix16_En15 [4]
  SIGNAL Multiport_Switch5_out1_re_1      : vector_of_std_logic_vector16(0 TO 3);  -- ufix16 [4]
  SIGNAL Multiport_Switch5_out1_im_1      : vector_of_std_logic_vector16(0 TO 3);  -- ufix16 [4]
  SIGNAL y_1                              : std_logic_vector(127 DOWNTO 0);  -- ufix128
  SIGNAL NCO_Generator_2_out1             : std_logic;
  SIGNAL NCO_Generator_2_out2_re          : vector_of_std_logic_vector16(0 TO 3);  -- ufix16 [4]
  SIGNAL NCO_Generator_2_out2_im          : vector_of_std_logic_vector16(0 TO 3);  -- ufix16 [4]
  SIGNAL Bit_Slice2_out1                  : std_logic;  -- ufix1
  SIGNAL Gain_NCO_2_signed                : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL NCO_Generator_2_out2_re_signed   : vector_of_signed16(0 TO 3);  -- sfix16_En15 [4]
  SIGNAL NCO_Generator_2_out2_im_signed   : vector_of_signed16(0 TO 3);  -- sfix16_En15 [4]
  SIGNAL Product2_mul_temp                : vector_of_signed32(0 TO 3);  -- sfix32_En29 [4]
  SIGNAL Product2_mul_temp_1              : vector_of_signed32(0 TO 3);  -- sfix32_En29 [4]
  SIGNAL Product2_out1_re                 : vector_of_signed16(0 TO 3);  -- sfix16_En15 [4]
  SIGNAL Product2_out1_im                 : vector_of_signed16(0 TO 3);  -- sfix16_En15 [4]
  SIGNAL Multiport_Switch1_out1_re        : vector_of_signed16(0 TO 3);  -- sfix16_En15 [4]
  SIGNAL Multiport_Switch1_out1_im        : vector_of_signed16(0 TO 3);  -- sfix16_En15 [4]
  SIGNAL Multiport_Switch6_out1_re        : vector_of_signed16(0 TO 3);  -- sfix16_En15 [4]
  SIGNAL Multiport_Switch6_out1_im        : vector_of_signed16(0 TO 3);  -- sfix16_En15 [4]
  SIGNAL Multiport_Switch6_out1_re_1      : vector_of_std_logic_vector16(0 TO 3);  -- ufix16 [4]
  SIGNAL Multiport_Switch6_out1_im_1      : vector_of_std_logic_vector16(0 TO 3);  -- ufix16 [4]
  SIGNAL y_2                              : std_logic_vector(127 DOWNTO 0);  -- ufix128
  SIGNAL NCO_Generator_3_out1             : std_logic;
  SIGNAL NCO_Generator_3_out2_re          : vector_of_std_logic_vector16(0 TO 3);  -- ufix16 [4]
  SIGNAL NCO_Generator_3_out2_im          : vector_of_std_logic_vector16(0 TO 3);  -- ufix16 [4]
  SIGNAL Bit_Slice3_out1                  : std_logic;  -- ufix1
  SIGNAL Gain_NCO_3_signed                : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL NCO_Generator_3_out2_re_signed   : vector_of_signed16(0 TO 3);  -- sfix16_En15 [4]
  SIGNAL NCO_Generator_3_out2_im_signed   : vector_of_signed16(0 TO 3);  -- sfix16_En15 [4]
  SIGNAL Product3_mul_temp                : vector_of_signed32(0 TO 3);  -- sfix32_En29 [4]
  SIGNAL Product3_mul_temp_1              : vector_of_signed32(0 TO 3);  -- sfix32_En29 [4]
  SIGNAL Product3_out1_re                 : vector_of_signed16(0 TO 3);  -- sfix16_En15 [4]
  SIGNAL Product3_out1_im                 : vector_of_signed16(0 TO 3);  -- sfix16_En15 [4]
  SIGNAL Multiport_Switch2_out1_re        : vector_of_signed16(0 TO 3);  -- sfix16_En15 [4]
  SIGNAL Multiport_Switch2_out1_im        : vector_of_signed16(0 TO 3);  -- sfix16_En15 [4]
  SIGNAL Multiport_Switch7_out1_re        : vector_of_signed16(0 TO 3);  -- sfix16_En15 [4]
  SIGNAL Multiport_Switch7_out1_im        : vector_of_signed16(0 TO 3);  -- sfix16_En15 [4]
  SIGNAL Multiport_Switch7_out1_re_1      : vector_of_std_logic_vector16(0 TO 3);  -- ufix16 [4]
  SIGNAL Multiport_Switch7_out1_im_1      : vector_of_std_logic_vector16(0 TO 3);  -- ufix16 [4]
  SIGNAL y_3                              : std_logic_vector(127 DOWNTO 0);  -- ufix128

BEGIN
  u_NCO_Generator_0 : frequency_synth_src_NCO_Generator_0
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              Step_Size => Step_Size_0,  -- uint32
              Enable => Enable_NCO_0,
              Valid_Out => NCO_Generator_0_out1,
              Signal_re => NCO_Generator_0_out2_re,  -- sfix16_En15 [4]
              Signal_im => NCO_Generator_0_out2_im  -- sfix16_En15 [4]
              );

  u_Convert_to_SSR_0 : frequency_synth_src_Convert_to_SSR_0
    PORT MAP( Signal_re => Multiport_Switch3_out1_re_1,  -- sfix16_En15 [4]
              Signal_im => Multiport_Switch3_out1_im_1,  -- sfix16_En15 [4]
              SSR => y  -- ufix128
              );

  u_NCO_Generator_1 : frequency_synth_src_NCO_Generator_1
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              Step_Size => Step_Size_1,  -- uint32
              Enable => Enable_NCO_1,
              Valid_Out => NCO_Generator_1_out1,
              Signal_re => NCO_Generator_1_out2_re,  -- sfix16_En15 [4]
              Signal_im => NCO_Generator_1_out2_im  -- sfix16_En15 [4]
              );

  u_Convert_to_SSR_1 : frequency_synth_src_Convert_to_SSR_1
    PORT MAP( Signal_re => Multiport_Switch5_out1_re_1,  -- sfix16_En15 [4]
              Signal_im => Multiport_Switch5_out1_im_1,  -- sfix16_En15 [4]
              SSR => y_1  -- ufix128
              );

  u_NCO_Generator_2 : frequency_synth_src_NCO_Generator_2
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              Step_Size => Step_Size_2,  -- uint32
              Enable => Enable_NCO_2,
              Valid_Out => NCO_Generator_2_out1,
              Signal_re => NCO_Generator_2_out2_re,  -- sfix16_En15 [4]
              Signal_im => NCO_Generator_2_out2_im  -- sfix16_En15 [4]
              );

  u_Convert_to_SSR_2 : frequency_synth_src_Convert_to_SSR_2
    PORT MAP( Signal_re => Multiport_Switch6_out1_re_1,  -- sfix16_En15 [4]
              Signal_im => Multiport_Switch6_out1_im_1,  -- sfix16_En15 [4]
              SSR => y_2  -- ufix128
              );

  u_NCO_Generator_3 : frequency_synth_src_NCO_Generator_3
    PORT MAP( clk => clk,
              reset => reset,
              enb => clk_enable,
              Step_Size => Step_Size_3,  -- uint32
              Enable => Enable_NCO_3,
              Valid_Out => NCO_Generator_3_out1,
              Signal_re => NCO_Generator_3_out2_re,  -- sfix16_En15 [4]
              Signal_im => NCO_Generator_3_out2_im  -- sfix16_En15 [4]
              );

  u_Convert_to_SSR_3 : frequency_synth_src_Convert_to_SSR_3
    PORT MAP( Signal_re => Multiport_Switch7_out1_re_1,  -- sfix16_En15 [4]
              Signal_im => Multiport_Switch7_out1_im_1,  -- sfix16_En15 [4]
              SSR => y_3  -- ufix128
              );

  Constant_unsigned <= unsigned(Constant_rsvd);

  Bit_Slice_out1 <= Constant_unsigned(0);

  Enable(0) <= to_signed(16#7FFF#, 16);
  Enable(1) <= to_signed(16#7FFF#, 16);
  Enable(2) <= to_signed(16#7FFF#, 16);
  Enable(3) <= to_signed(16#7FFF#, 16);

  Enable_1(0) <= to_signed(16#0000#, 16);
  Enable_1(1) <= to_signed(16#0000#, 16);
  Enable_1(2) <= to_signed(16#0000#, 16);
  Enable_1(3) <= to_signed(16#0000#, 16);

  Gain_NCO_0_signed <= signed(Gain_NCO_0);

  outputgen15: FOR k IN 0 TO 3 GENERATE
    NCO_Generator_0_out2_re_signed(k) <= signed(NCO_Generator_0_out2_re(k));
  END GENERATE;

  outputgen14: FOR k IN 0 TO 3 GENERATE
    NCO_Generator_0_out2_im_signed(k) <= signed(NCO_Generator_0_out2_im(k));
  END GENERATE;


  Product_out1_im_gen: FOR t_0 IN 0 TO 3 GENERATE
    Product_mul_temp(t_0) <= Gain_NCO_0_signed * NCO_Generator_0_out2_re_signed(t_0);
    Product_out1_re(t_0) <= Product_mul_temp(t_0)(29 DOWNTO 14);
    Product_mul_temp_1(t_0) <= Gain_NCO_0_signed * NCO_Generator_0_out2_im_signed(t_0);
    Product_out1_im(t_0) <= Product_mul_temp_1(t_0)(29 DOWNTO 14);
  END GENERATE Product_out1_im_gen;


  
  Multiport_Switch_out1_re <= Enable_1 WHEN NCO_Generator_0_out1 = '0' ELSE
      Product_out1_re;
  
  Multiport_Switch_out1_im <= Enable_1 WHEN NCO_Generator_0_out1 = '0' ELSE
      Product_out1_im;

  
  Multiport_Switch3_out1_re <= Enable WHEN Bit_Slice_out1 = '0' ELSE
      Multiport_Switch_out1_re;
  
  Multiport_Switch3_out1_im <= Enable WHEN Bit_Slice_out1 = '0' ELSE
      Multiport_Switch_out1_im;

  outputgen13: FOR k IN 0 TO 3 GENERATE
    Multiport_Switch3_out1_re_1(k) <= std_logic_vector(Multiport_Switch3_out1_re(k));
  END GENERATE;

  outputgen12: FOR k IN 0 TO 3 GENERATE
    Multiport_Switch3_out1_im_1(k) <= std_logic_vector(Multiport_Switch3_out1_im(k));
  END GENERATE;

  Bit_Slice1_out1 <= Constant_unsigned(1);

  Gain_NCO_1_signed <= signed(Gain_NCO_1);

  outputgen11: FOR k IN 0 TO 3 GENERATE
    NCO_Generator_1_out2_re_signed(k) <= signed(NCO_Generator_1_out2_re(k));
  END GENERATE;

  outputgen10: FOR k IN 0 TO 3 GENERATE
    NCO_Generator_1_out2_im_signed(k) <= signed(NCO_Generator_1_out2_im(k));
  END GENERATE;


  Product1_out1_im_gen: FOR t_01 IN 0 TO 3 GENERATE
    Product1_mul_temp(t_01) <= Gain_NCO_1_signed * NCO_Generator_1_out2_re_signed(t_01);
    Product1_out1_re(t_01) <= Product1_mul_temp(t_01)(29 DOWNTO 14);
    Product1_mul_temp_1(t_01) <= Gain_NCO_1_signed * NCO_Generator_1_out2_im_signed(t_01);
    Product1_out1_im(t_01) <= Product1_mul_temp_1(t_01)(29 DOWNTO 14);
  END GENERATE Product1_out1_im_gen;


  
  Multiport_Switch4_out1_re <= Enable_1 WHEN NCO_Generator_1_out1 = '0' ELSE
      Product1_out1_re;
  
  Multiport_Switch4_out1_im <= Enable_1 WHEN NCO_Generator_1_out1 = '0' ELSE
      Product1_out1_im;

  
  Multiport_Switch5_out1_re <= Enable WHEN Bit_Slice1_out1 = '0' ELSE
      Multiport_Switch4_out1_re;
  
  Multiport_Switch5_out1_im <= Enable WHEN Bit_Slice1_out1 = '0' ELSE
      Multiport_Switch4_out1_im;

  outputgen9: FOR k IN 0 TO 3 GENERATE
    Multiport_Switch5_out1_re_1(k) <= std_logic_vector(Multiport_Switch5_out1_re(k));
  END GENERATE;

  outputgen8: FOR k IN 0 TO 3 GENERATE
    Multiport_Switch5_out1_im_1(k) <= std_logic_vector(Multiport_Switch5_out1_im(k));
  END GENERATE;

  Bit_Slice2_out1 <= Constant_unsigned(2);

  Gain_NCO_2_signed <= signed(Gain_NCO_2);

  outputgen7: FOR k IN 0 TO 3 GENERATE
    NCO_Generator_2_out2_re_signed(k) <= signed(NCO_Generator_2_out2_re(k));
  END GENERATE;

  outputgen6: FOR k IN 0 TO 3 GENERATE
    NCO_Generator_2_out2_im_signed(k) <= signed(NCO_Generator_2_out2_im(k));
  END GENERATE;


  Product2_out1_im_gen: FOR t_02 IN 0 TO 3 GENERATE
    Product2_mul_temp(t_02) <= Gain_NCO_2_signed * NCO_Generator_2_out2_re_signed(t_02);
    Product2_out1_re(t_02) <= Product2_mul_temp(t_02)(29 DOWNTO 14);
    Product2_mul_temp_1(t_02) <= Gain_NCO_2_signed * NCO_Generator_2_out2_im_signed(t_02);
    Product2_out1_im(t_02) <= Product2_mul_temp_1(t_02)(29 DOWNTO 14);
  END GENERATE Product2_out1_im_gen;


  
  Multiport_Switch1_out1_re <= Enable_1 WHEN NCO_Generator_2_out1 = '0' ELSE
      Product2_out1_re;
  
  Multiport_Switch1_out1_im <= Enable_1 WHEN NCO_Generator_2_out1 = '0' ELSE
      Product2_out1_im;

  
  Multiport_Switch6_out1_re <= Enable WHEN Bit_Slice2_out1 = '0' ELSE
      Multiport_Switch1_out1_re;
  
  Multiport_Switch6_out1_im <= Enable WHEN Bit_Slice2_out1 = '0' ELSE
      Multiport_Switch1_out1_im;

  outputgen5: FOR k IN 0 TO 3 GENERATE
    Multiport_Switch6_out1_re_1(k) <= std_logic_vector(Multiport_Switch6_out1_re(k));
  END GENERATE;

  outputgen4: FOR k IN 0 TO 3 GENERATE
    Multiport_Switch6_out1_im_1(k) <= std_logic_vector(Multiport_Switch6_out1_im(k));
  END GENERATE;

  Bit_Slice3_out1 <= Constant_unsigned(3);

  Gain_NCO_3_signed <= signed(Gain_NCO_3);

  outputgen3: FOR k IN 0 TO 3 GENERATE
    NCO_Generator_3_out2_re_signed(k) <= signed(NCO_Generator_3_out2_re(k));
  END GENERATE;

  outputgen2: FOR k IN 0 TO 3 GENERATE
    NCO_Generator_3_out2_im_signed(k) <= signed(NCO_Generator_3_out2_im(k));
  END GENERATE;


  Product3_out1_im_gen: FOR t_03 IN 0 TO 3 GENERATE
    Product3_mul_temp(t_03) <= Gain_NCO_3_signed * NCO_Generator_3_out2_re_signed(t_03);
    Product3_out1_re(t_03) <= Product3_mul_temp(t_03)(29 DOWNTO 14);
    Product3_mul_temp_1(t_03) <= Gain_NCO_3_signed * NCO_Generator_3_out2_im_signed(t_03);
    Product3_out1_im(t_03) <= Product3_mul_temp_1(t_03)(29 DOWNTO 14);
  END GENERATE Product3_out1_im_gen;


  
  Multiport_Switch2_out1_re <= Enable_1 WHEN NCO_Generator_3_out1 = '0' ELSE
      Product3_out1_re;
  
  Multiport_Switch2_out1_im <= Enable_1 WHEN NCO_Generator_3_out1 = '0' ELSE
      Product3_out1_im;

  
  Multiport_Switch7_out1_re <= Enable WHEN Bit_Slice3_out1 = '0' ELSE
      Multiport_Switch2_out1_re;
  
  Multiport_Switch7_out1_im <= Enable WHEN Bit_Slice3_out1 = '0' ELSE
      Multiport_Switch2_out1_im;

  outputgen1: FOR k IN 0 TO 3 GENERATE
    Multiport_Switch7_out1_re_1(k) <= std_logic_vector(Multiport_Switch7_out1_re(k));
  END GENERATE;

  outputgen: FOR k IN 0 TO 3 GENERATE
    Multiport_Switch7_out1_im_1(k) <= std_logic_vector(Multiport_Switch7_out1_im(k));
  END GENERATE;

  ce_out <= clk_enable;

  Valid_NCO_0 <= NCO_Generator_0_out1;

  Data_NCO_0 <= y;

  Valid_NCO_1 <= NCO_Generator_1_out1;

  Data_NCO_1 <= y_1;

  Valid_NCO_2 <= NCO_Generator_2_out1;

  Data_NCO_2 <= y_2;

  Valid_NCO_3 <= NCO_Generator_3_out1;

  Data_NCO_3 <= y_3;

END rtl;

