-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\spectrum_fft_hdlcoder\spectrum_fft_src_FFT.vhd
-- Created: 2020-10-15 22:09:47
-- 
-- Generated by MATLAB 9.8 and HDL Coder 3.16
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Model base rate: 1.95313e-11
-- Target subsystem base rate: 3.90625e-09
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: spectrum_fft_src_FFT
-- Source Path: spectrum_fft_hdlcoder/FFT
-- Hierarchy Level: 0
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY spectrum_fft_src_FFT IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        s_axis_re_tvalid                  :   IN    std_logic;
        s_axis_re_tdata                   :   IN    std_logic_vector(15 DOWNTO 0);  -- uint16
        s_axis_re_tlast                   :   IN    std_logic;
        s_axis_re_tuser                   :   IN    std_logic;
        s_axis_im_tvalid                  :   IN    std_logic;
        s_axis_im_tdata                   :   IN    std_logic_vector(15 DOWNTO 0);  -- uint16
        s_axis_im_tlast                   :   IN    std_logic;
        s_axis_im_tuser                   :   IN    std_logic;
        reset_1                           :   IN    std_logic;
        m_axis_tready                     :   IN    std_logic;
        m_axis_tvalid                     :   OUT   std_logic;
        m_axis_tdata                      :   OUT   std_logic_vector(31 DOWNTO 0);  -- uint32
        m_axis_tlast                      :   OUT   std_logic;
        m_axis_tuser                      :   OUT   std_logic;
        s_axis_re_tready                  :   OUT   std_logic;
        s_axis_im_tready                  :   OUT   std_logic
        );
END spectrum_fft_src_FFT;


ARCHITECTURE rtl OF spectrum_fft_src_FFT IS

  -- Component Declarations
  COMPONENT spectrum_fft_src_FFT_HDL_Optimized
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          dataIn_re                       :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En15
          dataIn_im                       :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En15
          validIn                         :   IN    std_logic;
          syncReset                       :   IN    std_logic;
          dataOut_re                      :   OUT   std_logic_vector(26 DOWNTO 0);  -- sfix27_En15
          dataOut_im                      :   OUT   std_logic_vector(26 DOWNTO 0);  -- sfix27_En15
          startOut                        :   OUT   std_logic;
          endOut                          :   OUT   std_logic;
          validOut                        :   OUT   std_logic
          );
  END COMPONENT;

  COMPONENT spectrum_fft_src_nfp_convert_sfix_27_En15_to_single
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          nfp_in                          :   IN    std_logic_vector(26 DOWNTO 0);  -- sfix27_En15
          nfp_out                         :   OUT   std_logic_vector(31 DOWNTO 0)  -- single
          );
  END COMPONENT;

  COMPONENT spectrum_fft_src_nfp_hypot_single
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          nfp_in1                         :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          nfp_in2                         :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          nfp_out                         :   OUT   std_logic_vector(31 DOWNTO 0)  -- single
          );
  END COMPONENT;

  COMPONENT spectrum_fft_src_nfp_mul_single
    PORT( clk                             :   IN    std_logic;
          reset                           :   IN    std_logic;
          nfp_in1                         :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          nfp_in2                         :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          nfp_out                         :   OUT   std_logic_vector(31 DOWNTO 0)  -- single
          );
  END COMPONENT;

  COMPONENT spectrum_fft_src_nfp_wire_single
    PORT( nfp_in                          :   IN    std_logic_vector(31 DOWNTO 0);  -- single
          nfp_out                         :   OUT   std_logic_vector(31 DOWNTO 0)  -- uint32
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : spectrum_fft_src_FFT_HDL_Optimized
    USE ENTITY work.spectrum_fft_src_FFT_HDL_Optimized(rtl);

  FOR ALL : spectrum_fft_src_nfp_convert_sfix_27_En15_to_single
    USE ENTITY work.spectrum_fft_src_nfp_convert_sfix_27_En15_to_single(rtl);

  FOR ALL : spectrum_fft_src_nfp_hypot_single
    USE ENTITY work.spectrum_fft_src_nfp_hypot_single(rtl);

  FOR ALL : spectrum_fft_src_nfp_mul_single
    USE ENTITY work.spectrum_fft_src_nfp_mul_single(rtl);

  FOR ALL : spectrum_fft_src_nfp_wire_single
    USE ENTITY work.spectrum_fft_src_nfp_wire_single(rtl);

  -- Signals
  SIGNAL s_axis_re_tdata_unsigned         : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL s_axis_im_tdata_unsigned         : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL Data_Type_Conversion_out1_re     : signed(15 DOWNTO 0);  -- sfix16_En15
  SIGNAL Data_Type_Conversion_out1_im     : signed(15 DOWNTO 0);  -- sfix16_En15
  SIGNAL AND_out1                         : std_logic;
  SIGNAL NOT_out1                         : std_logic;
  SIGNAL AND2_out1                        : std_logic;
  SIGNAL Delay_iv                         : std_logic;
  SIGNAL Multiport_Switch_out1            : std_logic;
  SIGNAL Delay_toDel                      : std_logic;
  SIGNAL Delay_delOut                     : std_logic;
  SIGNAL Delay_out1                       : std_logic;
  SIGNAL FFT_HDL_Optimized_out3           : std_logic;
  SIGNAL AND1_out1                        : std_logic;
  SIGNAL FFT_HDL_Optimized_out1_re        : std_logic_vector(26 DOWNTO 0);  -- ufix27
  SIGNAL FFT_HDL_Optimized_out1_im        : std_logic_vector(26 DOWNTO 0);  -- ufix27
  SIGNAL FFT_HDL_Optimized_out2           : std_logic;
  SIGNAL FFT_HDL_Optimized_out4           : std_logic;
  SIGNAL delayMatch_reg                   : std_logic_vector(0 TO 46);  -- ufix1 [47]
  SIGNAL delayMatch_reg_next              : std_logic_vector(0 TO 46);  -- ufix1 [47]
  SIGNAL FFT_HDL_Optimized_out4_1         : std_logic;
  SIGNAL nfp_out_1_re                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL nfp_out_1_im                     : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Abs2_out1                        : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Square_out1                      : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL Float_Typecast_out1              : std_logic_vector(31 DOWNTO 0);  -- ufix32
  SIGNAL delayMatch1_reg                  : std_logic_vector(0 TO 46);  -- ufix1 [47]
  SIGNAL delayMatch1_reg_next             : std_logic_vector(0 TO 46);  -- ufix1 [47]
  SIGNAL FFT_HDL_Optimized_out3_1         : std_logic;
  SIGNAL delayMatch2_reg                  : std_logic_vector(0 TO 46);  -- ufix1 [47]
  SIGNAL delayMatch2_reg_next             : std_logic_vector(0 TO 46);  -- ufix1 [47]
  SIGNAL FFT_HDL_Optimized_out2_1         : std_logic;
  SIGNAL Constant_out1                    : std_logic;
  SIGNAL Constant1_out1                   : std_logic;

BEGIN
  u_FFT_HDL_Optimized : spectrum_fft_src_FFT_HDL_Optimized
    PORT MAP( clk => clk,
              reset => reset,
              dataIn_re => std_logic_vector(Data_Type_Conversion_out1_re),  -- sfix16_En15
              dataIn_im => std_logic_vector(Data_Type_Conversion_out1_im),  -- sfix16_En15
              validIn => AND_out1,
              syncReset => Multiport_Switch_out1,
              dataOut_re => FFT_HDL_Optimized_out1_re,  -- sfix27_En15
              dataOut_im => FFT_HDL_Optimized_out1_im,  -- sfix27_En15
              startOut => FFT_HDL_Optimized_out2,
              endOut => FFT_HDL_Optimized_out3,
              validOut => FFT_HDL_Optimized_out4
              );

  u_spectrum_fft_hdlcoder_FFT_nfp_convert_sfix_27_En15_to_single : spectrum_fft_src_nfp_convert_sfix_27_En15_to_single
    PORT MAP( clk => clk,
              reset => reset,
              nfp_in => FFT_HDL_Optimized_out1_re,  -- sfix27_En15
              nfp_out => nfp_out_1_re  -- single
              );

  u_spectrum_fft_hdlcoder_FFT_nfp_convert_sfix_27_En15_to_single_1 : spectrum_fft_src_nfp_convert_sfix_27_En15_to_single
    PORT MAP( clk => clk,
              reset => reset,
              nfp_in => FFT_HDL_Optimized_out1_im,  -- sfix27_En15
              nfp_out => nfp_out_1_im  -- single
              );

  u_nfp_hypot_comp : spectrum_fft_src_nfp_hypot_single
    PORT MAP( clk => clk,
              reset => reset,
              nfp_in1 => nfp_out_1_re,  -- single
              nfp_in2 => nfp_out_1_im,  -- single
              nfp_out => Abs2_out1  -- single
              );

  u_nfp_mul_comp : spectrum_fft_src_nfp_mul_single
    PORT MAP( clk => clk,
              reset => reset,
              nfp_in1 => Abs2_out1,  -- single
              nfp_in2 => Abs2_out1,  -- single
              nfp_out => Square_out1  -- single
              );

  u_nfp_wire_single : spectrum_fft_src_nfp_wire_single
    PORT MAP( nfp_in => Square_out1,  -- single
              nfp_out => Float_Typecast_out1  -- uint32
              );

  s_axis_re_tdata_unsigned <= unsigned(s_axis_re_tdata);

  s_axis_im_tdata_unsigned <= unsigned(s_axis_im_tdata);

  Data_Type_Conversion_out1_re <= signed(s_axis_re_tdata_unsigned);
  Data_Type_Conversion_out1_im <= signed(s_axis_im_tdata_unsigned);

  AND_out1 <= s_axis_re_tvalid AND s_axis_im_tvalid;

  NOT_out1 <=  NOT reset_1;

  AND2_out1 <= s_axis_re_tuser AND NOT_out1;

  Delay_iv <= '0';

  
  Delay_toDel <= Multiport_Switch_out1 WHEN AND2_out1 = '0' ELSE
      Delay_iv;

  Delay_lowered_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Delay_delOut <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      Delay_delOut <= Delay_toDel;
    END IF;
  END PROCESS Delay_lowered_process;


  
  Delay_out1 <= Delay_delOut WHEN AND2_out1 = '0' ELSE
      Delay_iv;

  AND1_out1 <= reset_1 AND FFT_HDL_Optimized_out3;

  
  Multiport_Switch_out1 <= Delay_out1 WHEN AND1_out1 = '0' ELSE
      AND1_out1;

  delayMatch_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch_reg(0) <= '0';
      delayMatch_reg(1) <= '0';
      delayMatch_reg(2) <= '0';
      delayMatch_reg(3) <= '0';
      delayMatch_reg(4) <= '0';
      delayMatch_reg(5) <= '0';
      delayMatch_reg(6) <= '0';
      delayMatch_reg(7) <= '0';
      delayMatch_reg(8) <= '0';
      delayMatch_reg(9) <= '0';
      delayMatch_reg(10) <= '0';
      delayMatch_reg(11) <= '0';
      delayMatch_reg(12) <= '0';
      delayMatch_reg(13) <= '0';
      delayMatch_reg(14) <= '0';
      delayMatch_reg(15) <= '0';
      delayMatch_reg(16) <= '0';
      delayMatch_reg(17) <= '0';
      delayMatch_reg(18) <= '0';
      delayMatch_reg(19) <= '0';
      delayMatch_reg(20) <= '0';
      delayMatch_reg(21) <= '0';
      delayMatch_reg(22) <= '0';
      delayMatch_reg(23) <= '0';
      delayMatch_reg(24) <= '0';
      delayMatch_reg(25) <= '0';
      delayMatch_reg(26) <= '0';
      delayMatch_reg(27) <= '0';
      delayMatch_reg(28) <= '0';
      delayMatch_reg(29) <= '0';
      delayMatch_reg(30) <= '0';
      delayMatch_reg(31) <= '0';
      delayMatch_reg(32) <= '0';
      delayMatch_reg(33) <= '0';
      delayMatch_reg(34) <= '0';
      delayMatch_reg(35) <= '0';
      delayMatch_reg(36) <= '0';
      delayMatch_reg(37) <= '0';
      delayMatch_reg(38) <= '0';
      delayMatch_reg(39) <= '0';
      delayMatch_reg(40) <= '0';
      delayMatch_reg(41) <= '0';
      delayMatch_reg(42) <= '0';
      delayMatch_reg(43) <= '0';
      delayMatch_reg(44) <= '0';
      delayMatch_reg(45) <= '0';
      delayMatch_reg(46) <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      delayMatch_reg(0) <= delayMatch_reg_next(0);
      delayMatch_reg(1) <= delayMatch_reg_next(1);
      delayMatch_reg(2) <= delayMatch_reg_next(2);
      delayMatch_reg(3) <= delayMatch_reg_next(3);
      delayMatch_reg(4) <= delayMatch_reg_next(4);
      delayMatch_reg(5) <= delayMatch_reg_next(5);
      delayMatch_reg(6) <= delayMatch_reg_next(6);
      delayMatch_reg(7) <= delayMatch_reg_next(7);
      delayMatch_reg(8) <= delayMatch_reg_next(8);
      delayMatch_reg(9) <= delayMatch_reg_next(9);
      delayMatch_reg(10) <= delayMatch_reg_next(10);
      delayMatch_reg(11) <= delayMatch_reg_next(11);
      delayMatch_reg(12) <= delayMatch_reg_next(12);
      delayMatch_reg(13) <= delayMatch_reg_next(13);
      delayMatch_reg(14) <= delayMatch_reg_next(14);
      delayMatch_reg(15) <= delayMatch_reg_next(15);
      delayMatch_reg(16) <= delayMatch_reg_next(16);
      delayMatch_reg(17) <= delayMatch_reg_next(17);
      delayMatch_reg(18) <= delayMatch_reg_next(18);
      delayMatch_reg(19) <= delayMatch_reg_next(19);
      delayMatch_reg(20) <= delayMatch_reg_next(20);
      delayMatch_reg(21) <= delayMatch_reg_next(21);
      delayMatch_reg(22) <= delayMatch_reg_next(22);
      delayMatch_reg(23) <= delayMatch_reg_next(23);
      delayMatch_reg(24) <= delayMatch_reg_next(24);
      delayMatch_reg(25) <= delayMatch_reg_next(25);
      delayMatch_reg(26) <= delayMatch_reg_next(26);
      delayMatch_reg(27) <= delayMatch_reg_next(27);
      delayMatch_reg(28) <= delayMatch_reg_next(28);
      delayMatch_reg(29) <= delayMatch_reg_next(29);
      delayMatch_reg(30) <= delayMatch_reg_next(30);
      delayMatch_reg(31) <= delayMatch_reg_next(31);
      delayMatch_reg(32) <= delayMatch_reg_next(32);
      delayMatch_reg(33) <= delayMatch_reg_next(33);
      delayMatch_reg(34) <= delayMatch_reg_next(34);
      delayMatch_reg(35) <= delayMatch_reg_next(35);
      delayMatch_reg(36) <= delayMatch_reg_next(36);
      delayMatch_reg(37) <= delayMatch_reg_next(37);
      delayMatch_reg(38) <= delayMatch_reg_next(38);
      delayMatch_reg(39) <= delayMatch_reg_next(39);
      delayMatch_reg(40) <= delayMatch_reg_next(40);
      delayMatch_reg(41) <= delayMatch_reg_next(41);
      delayMatch_reg(42) <= delayMatch_reg_next(42);
      delayMatch_reg(43) <= delayMatch_reg_next(43);
      delayMatch_reg(44) <= delayMatch_reg_next(44);
      delayMatch_reg(45) <= delayMatch_reg_next(45);
      delayMatch_reg(46) <= delayMatch_reg_next(46);
    END IF;
  END PROCESS delayMatch_process;

  FFT_HDL_Optimized_out4_1 <= delayMatch_reg(46);
  delayMatch_reg_next(0) <= FFT_HDL_Optimized_out4;
  delayMatch_reg_next(1) <= delayMatch_reg(0);
  delayMatch_reg_next(2) <= delayMatch_reg(1);
  delayMatch_reg_next(3) <= delayMatch_reg(2);
  delayMatch_reg_next(4) <= delayMatch_reg(3);
  delayMatch_reg_next(5) <= delayMatch_reg(4);
  delayMatch_reg_next(6) <= delayMatch_reg(5);
  delayMatch_reg_next(7) <= delayMatch_reg(6);
  delayMatch_reg_next(8) <= delayMatch_reg(7);
  delayMatch_reg_next(9) <= delayMatch_reg(8);
  delayMatch_reg_next(10) <= delayMatch_reg(9);
  delayMatch_reg_next(11) <= delayMatch_reg(10);
  delayMatch_reg_next(12) <= delayMatch_reg(11);
  delayMatch_reg_next(13) <= delayMatch_reg(12);
  delayMatch_reg_next(14) <= delayMatch_reg(13);
  delayMatch_reg_next(15) <= delayMatch_reg(14);
  delayMatch_reg_next(16) <= delayMatch_reg(15);
  delayMatch_reg_next(17) <= delayMatch_reg(16);
  delayMatch_reg_next(18) <= delayMatch_reg(17);
  delayMatch_reg_next(19) <= delayMatch_reg(18);
  delayMatch_reg_next(20) <= delayMatch_reg(19);
  delayMatch_reg_next(21) <= delayMatch_reg(20);
  delayMatch_reg_next(22) <= delayMatch_reg(21);
  delayMatch_reg_next(23) <= delayMatch_reg(22);
  delayMatch_reg_next(24) <= delayMatch_reg(23);
  delayMatch_reg_next(25) <= delayMatch_reg(24);
  delayMatch_reg_next(26) <= delayMatch_reg(25);
  delayMatch_reg_next(27) <= delayMatch_reg(26);
  delayMatch_reg_next(28) <= delayMatch_reg(27);
  delayMatch_reg_next(29) <= delayMatch_reg(28);
  delayMatch_reg_next(30) <= delayMatch_reg(29);
  delayMatch_reg_next(31) <= delayMatch_reg(30);
  delayMatch_reg_next(32) <= delayMatch_reg(31);
  delayMatch_reg_next(33) <= delayMatch_reg(32);
  delayMatch_reg_next(34) <= delayMatch_reg(33);
  delayMatch_reg_next(35) <= delayMatch_reg(34);
  delayMatch_reg_next(36) <= delayMatch_reg(35);
  delayMatch_reg_next(37) <= delayMatch_reg(36);
  delayMatch_reg_next(38) <= delayMatch_reg(37);
  delayMatch_reg_next(39) <= delayMatch_reg(38);
  delayMatch_reg_next(40) <= delayMatch_reg(39);
  delayMatch_reg_next(41) <= delayMatch_reg(40);
  delayMatch_reg_next(42) <= delayMatch_reg(41);
  delayMatch_reg_next(43) <= delayMatch_reg(42);
  delayMatch_reg_next(44) <= delayMatch_reg(43);
  delayMatch_reg_next(45) <= delayMatch_reg(44);
  delayMatch_reg_next(46) <= delayMatch_reg(45);

  m_axis_tvalid <= FFT_HDL_Optimized_out4_1;

  delayMatch1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch1_reg(0) <= '0';
      delayMatch1_reg(1) <= '0';
      delayMatch1_reg(2) <= '0';
      delayMatch1_reg(3) <= '0';
      delayMatch1_reg(4) <= '0';
      delayMatch1_reg(5) <= '0';
      delayMatch1_reg(6) <= '0';
      delayMatch1_reg(7) <= '0';
      delayMatch1_reg(8) <= '0';
      delayMatch1_reg(9) <= '0';
      delayMatch1_reg(10) <= '0';
      delayMatch1_reg(11) <= '0';
      delayMatch1_reg(12) <= '0';
      delayMatch1_reg(13) <= '0';
      delayMatch1_reg(14) <= '0';
      delayMatch1_reg(15) <= '0';
      delayMatch1_reg(16) <= '0';
      delayMatch1_reg(17) <= '0';
      delayMatch1_reg(18) <= '0';
      delayMatch1_reg(19) <= '0';
      delayMatch1_reg(20) <= '0';
      delayMatch1_reg(21) <= '0';
      delayMatch1_reg(22) <= '0';
      delayMatch1_reg(23) <= '0';
      delayMatch1_reg(24) <= '0';
      delayMatch1_reg(25) <= '0';
      delayMatch1_reg(26) <= '0';
      delayMatch1_reg(27) <= '0';
      delayMatch1_reg(28) <= '0';
      delayMatch1_reg(29) <= '0';
      delayMatch1_reg(30) <= '0';
      delayMatch1_reg(31) <= '0';
      delayMatch1_reg(32) <= '0';
      delayMatch1_reg(33) <= '0';
      delayMatch1_reg(34) <= '0';
      delayMatch1_reg(35) <= '0';
      delayMatch1_reg(36) <= '0';
      delayMatch1_reg(37) <= '0';
      delayMatch1_reg(38) <= '0';
      delayMatch1_reg(39) <= '0';
      delayMatch1_reg(40) <= '0';
      delayMatch1_reg(41) <= '0';
      delayMatch1_reg(42) <= '0';
      delayMatch1_reg(43) <= '0';
      delayMatch1_reg(44) <= '0';
      delayMatch1_reg(45) <= '0';
      delayMatch1_reg(46) <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      delayMatch1_reg(0) <= delayMatch1_reg_next(0);
      delayMatch1_reg(1) <= delayMatch1_reg_next(1);
      delayMatch1_reg(2) <= delayMatch1_reg_next(2);
      delayMatch1_reg(3) <= delayMatch1_reg_next(3);
      delayMatch1_reg(4) <= delayMatch1_reg_next(4);
      delayMatch1_reg(5) <= delayMatch1_reg_next(5);
      delayMatch1_reg(6) <= delayMatch1_reg_next(6);
      delayMatch1_reg(7) <= delayMatch1_reg_next(7);
      delayMatch1_reg(8) <= delayMatch1_reg_next(8);
      delayMatch1_reg(9) <= delayMatch1_reg_next(9);
      delayMatch1_reg(10) <= delayMatch1_reg_next(10);
      delayMatch1_reg(11) <= delayMatch1_reg_next(11);
      delayMatch1_reg(12) <= delayMatch1_reg_next(12);
      delayMatch1_reg(13) <= delayMatch1_reg_next(13);
      delayMatch1_reg(14) <= delayMatch1_reg_next(14);
      delayMatch1_reg(15) <= delayMatch1_reg_next(15);
      delayMatch1_reg(16) <= delayMatch1_reg_next(16);
      delayMatch1_reg(17) <= delayMatch1_reg_next(17);
      delayMatch1_reg(18) <= delayMatch1_reg_next(18);
      delayMatch1_reg(19) <= delayMatch1_reg_next(19);
      delayMatch1_reg(20) <= delayMatch1_reg_next(20);
      delayMatch1_reg(21) <= delayMatch1_reg_next(21);
      delayMatch1_reg(22) <= delayMatch1_reg_next(22);
      delayMatch1_reg(23) <= delayMatch1_reg_next(23);
      delayMatch1_reg(24) <= delayMatch1_reg_next(24);
      delayMatch1_reg(25) <= delayMatch1_reg_next(25);
      delayMatch1_reg(26) <= delayMatch1_reg_next(26);
      delayMatch1_reg(27) <= delayMatch1_reg_next(27);
      delayMatch1_reg(28) <= delayMatch1_reg_next(28);
      delayMatch1_reg(29) <= delayMatch1_reg_next(29);
      delayMatch1_reg(30) <= delayMatch1_reg_next(30);
      delayMatch1_reg(31) <= delayMatch1_reg_next(31);
      delayMatch1_reg(32) <= delayMatch1_reg_next(32);
      delayMatch1_reg(33) <= delayMatch1_reg_next(33);
      delayMatch1_reg(34) <= delayMatch1_reg_next(34);
      delayMatch1_reg(35) <= delayMatch1_reg_next(35);
      delayMatch1_reg(36) <= delayMatch1_reg_next(36);
      delayMatch1_reg(37) <= delayMatch1_reg_next(37);
      delayMatch1_reg(38) <= delayMatch1_reg_next(38);
      delayMatch1_reg(39) <= delayMatch1_reg_next(39);
      delayMatch1_reg(40) <= delayMatch1_reg_next(40);
      delayMatch1_reg(41) <= delayMatch1_reg_next(41);
      delayMatch1_reg(42) <= delayMatch1_reg_next(42);
      delayMatch1_reg(43) <= delayMatch1_reg_next(43);
      delayMatch1_reg(44) <= delayMatch1_reg_next(44);
      delayMatch1_reg(45) <= delayMatch1_reg_next(45);
      delayMatch1_reg(46) <= delayMatch1_reg_next(46);
    END IF;
  END PROCESS delayMatch1_process;

  FFT_HDL_Optimized_out3_1 <= delayMatch1_reg(46);
  delayMatch1_reg_next(0) <= FFT_HDL_Optimized_out3;
  delayMatch1_reg_next(1) <= delayMatch1_reg(0);
  delayMatch1_reg_next(2) <= delayMatch1_reg(1);
  delayMatch1_reg_next(3) <= delayMatch1_reg(2);
  delayMatch1_reg_next(4) <= delayMatch1_reg(3);
  delayMatch1_reg_next(5) <= delayMatch1_reg(4);
  delayMatch1_reg_next(6) <= delayMatch1_reg(5);
  delayMatch1_reg_next(7) <= delayMatch1_reg(6);
  delayMatch1_reg_next(8) <= delayMatch1_reg(7);
  delayMatch1_reg_next(9) <= delayMatch1_reg(8);
  delayMatch1_reg_next(10) <= delayMatch1_reg(9);
  delayMatch1_reg_next(11) <= delayMatch1_reg(10);
  delayMatch1_reg_next(12) <= delayMatch1_reg(11);
  delayMatch1_reg_next(13) <= delayMatch1_reg(12);
  delayMatch1_reg_next(14) <= delayMatch1_reg(13);
  delayMatch1_reg_next(15) <= delayMatch1_reg(14);
  delayMatch1_reg_next(16) <= delayMatch1_reg(15);
  delayMatch1_reg_next(17) <= delayMatch1_reg(16);
  delayMatch1_reg_next(18) <= delayMatch1_reg(17);
  delayMatch1_reg_next(19) <= delayMatch1_reg(18);
  delayMatch1_reg_next(20) <= delayMatch1_reg(19);
  delayMatch1_reg_next(21) <= delayMatch1_reg(20);
  delayMatch1_reg_next(22) <= delayMatch1_reg(21);
  delayMatch1_reg_next(23) <= delayMatch1_reg(22);
  delayMatch1_reg_next(24) <= delayMatch1_reg(23);
  delayMatch1_reg_next(25) <= delayMatch1_reg(24);
  delayMatch1_reg_next(26) <= delayMatch1_reg(25);
  delayMatch1_reg_next(27) <= delayMatch1_reg(26);
  delayMatch1_reg_next(28) <= delayMatch1_reg(27);
  delayMatch1_reg_next(29) <= delayMatch1_reg(28);
  delayMatch1_reg_next(30) <= delayMatch1_reg(29);
  delayMatch1_reg_next(31) <= delayMatch1_reg(30);
  delayMatch1_reg_next(32) <= delayMatch1_reg(31);
  delayMatch1_reg_next(33) <= delayMatch1_reg(32);
  delayMatch1_reg_next(34) <= delayMatch1_reg(33);
  delayMatch1_reg_next(35) <= delayMatch1_reg(34);
  delayMatch1_reg_next(36) <= delayMatch1_reg(35);
  delayMatch1_reg_next(37) <= delayMatch1_reg(36);
  delayMatch1_reg_next(38) <= delayMatch1_reg(37);
  delayMatch1_reg_next(39) <= delayMatch1_reg(38);
  delayMatch1_reg_next(40) <= delayMatch1_reg(39);
  delayMatch1_reg_next(41) <= delayMatch1_reg(40);
  delayMatch1_reg_next(42) <= delayMatch1_reg(41);
  delayMatch1_reg_next(43) <= delayMatch1_reg(42);
  delayMatch1_reg_next(44) <= delayMatch1_reg(43);
  delayMatch1_reg_next(45) <= delayMatch1_reg(44);
  delayMatch1_reg_next(46) <= delayMatch1_reg(45);

  m_axis_tlast <= FFT_HDL_Optimized_out3_1;

  delayMatch2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch2_reg(0) <= '0';
      delayMatch2_reg(1) <= '0';
      delayMatch2_reg(2) <= '0';
      delayMatch2_reg(3) <= '0';
      delayMatch2_reg(4) <= '0';
      delayMatch2_reg(5) <= '0';
      delayMatch2_reg(6) <= '0';
      delayMatch2_reg(7) <= '0';
      delayMatch2_reg(8) <= '0';
      delayMatch2_reg(9) <= '0';
      delayMatch2_reg(10) <= '0';
      delayMatch2_reg(11) <= '0';
      delayMatch2_reg(12) <= '0';
      delayMatch2_reg(13) <= '0';
      delayMatch2_reg(14) <= '0';
      delayMatch2_reg(15) <= '0';
      delayMatch2_reg(16) <= '0';
      delayMatch2_reg(17) <= '0';
      delayMatch2_reg(18) <= '0';
      delayMatch2_reg(19) <= '0';
      delayMatch2_reg(20) <= '0';
      delayMatch2_reg(21) <= '0';
      delayMatch2_reg(22) <= '0';
      delayMatch2_reg(23) <= '0';
      delayMatch2_reg(24) <= '0';
      delayMatch2_reg(25) <= '0';
      delayMatch2_reg(26) <= '0';
      delayMatch2_reg(27) <= '0';
      delayMatch2_reg(28) <= '0';
      delayMatch2_reg(29) <= '0';
      delayMatch2_reg(30) <= '0';
      delayMatch2_reg(31) <= '0';
      delayMatch2_reg(32) <= '0';
      delayMatch2_reg(33) <= '0';
      delayMatch2_reg(34) <= '0';
      delayMatch2_reg(35) <= '0';
      delayMatch2_reg(36) <= '0';
      delayMatch2_reg(37) <= '0';
      delayMatch2_reg(38) <= '0';
      delayMatch2_reg(39) <= '0';
      delayMatch2_reg(40) <= '0';
      delayMatch2_reg(41) <= '0';
      delayMatch2_reg(42) <= '0';
      delayMatch2_reg(43) <= '0';
      delayMatch2_reg(44) <= '0';
      delayMatch2_reg(45) <= '0';
      delayMatch2_reg(46) <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      delayMatch2_reg(0) <= delayMatch2_reg_next(0);
      delayMatch2_reg(1) <= delayMatch2_reg_next(1);
      delayMatch2_reg(2) <= delayMatch2_reg_next(2);
      delayMatch2_reg(3) <= delayMatch2_reg_next(3);
      delayMatch2_reg(4) <= delayMatch2_reg_next(4);
      delayMatch2_reg(5) <= delayMatch2_reg_next(5);
      delayMatch2_reg(6) <= delayMatch2_reg_next(6);
      delayMatch2_reg(7) <= delayMatch2_reg_next(7);
      delayMatch2_reg(8) <= delayMatch2_reg_next(8);
      delayMatch2_reg(9) <= delayMatch2_reg_next(9);
      delayMatch2_reg(10) <= delayMatch2_reg_next(10);
      delayMatch2_reg(11) <= delayMatch2_reg_next(11);
      delayMatch2_reg(12) <= delayMatch2_reg_next(12);
      delayMatch2_reg(13) <= delayMatch2_reg_next(13);
      delayMatch2_reg(14) <= delayMatch2_reg_next(14);
      delayMatch2_reg(15) <= delayMatch2_reg_next(15);
      delayMatch2_reg(16) <= delayMatch2_reg_next(16);
      delayMatch2_reg(17) <= delayMatch2_reg_next(17);
      delayMatch2_reg(18) <= delayMatch2_reg_next(18);
      delayMatch2_reg(19) <= delayMatch2_reg_next(19);
      delayMatch2_reg(20) <= delayMatch2_reg_next(20);
      delayMatch2_reg(21) <= delayMatch2_reg_next(21);
      delayMatch2_reg(22) <= delayMatch2_reg_next(22);
      delayMatch2_reg(23) <= delayMatch2_reg_next(23);
      delayMatch2_reg(24) <= delayMatch2_reg_next(24);
      delayMatch2_reg(25) <= delayMatch2_reg_next(25);
      delayMatch2_reg(26) <= delayMatch2_reg_next(26);
      delayMatch2_reg(27) <= delayMatch2_reg_next(27);
      delayMatch2_reg(28) <= delayMatch2_reg_next(28);
      delayMatch2_reg(29) <= delayMatch2_reg_next(29);
      delayMatch2_reg(30) <= delayMatch2_reg_next(30);
      delayMatch2_reg(31) <= delayMatch2_reg_next(31);
      delayMatch2_reg(32) <= delayMatch2_reg_next(32);
      delayMatch2_reg(33) <= delayMatch2_reg_next(33);
      delayMatch2_reg(34) <= delayMatch2_reg_next(34);
      delayMatch2_reg(35) <= delayMatch2_reg_next(35);
      delayMatch2_reg(36) <= delayMatch2_reg_next(36);
      delayMatch2_reg(37) <= delayMatch2_reg_next(37);
      delayMatch2_reg(38) <= delayMatch2_reg_next(38);
      delayMatch2_reg(39) <= delayMatch2_reg_next(39);
      delayMatch2_reg(40) <= delayMatch2_reg_next(40);
      delayMatch2_reg(41) <= delayMatch2_reg_next(41);
      delayMatch2_reg(42) <= delayMatch2_reg_next(42);
      delayMatch2_reg(43) <= delayMatch2_reg_next(43);
      delayMatch2_reg(44) <= delayMatch2_reg_next(44);
      delayMatch2_reg(45) <= delayMatch2_reg_next(45);
      delayMatch2_reg(46) <= delayMatch2_reg_next(46);
    END IF;
  END PROCESS delayMatch2_process;

  FFT_HDL_Optimized_out2_1 <= delayMatch2_reg(46);
  delayMatch2_reg_next(0) <= FFT_HDL_Optimized_out2;
  delayMatch2_reg_next(1) <= delayMatch2_reg(0);
  delayMatch2_reg_next(2) <= delayMatch2_reg(1);
  delayMatch2_reg_next(3) <= delayMatch2_reg(2);
  delayMatch2_reg_next(4) <= delayMatch2_reg(3);
  delayMatch2_reg_next(5) <= delayMatch2_reg(4);
  delayMatch2_reg_next(6) <= delayMatch2_reg(5);
  delayMatch2_reg_next(7) <= delayMatch2_reg(6);
  delayMatch2_reg_next(8) <= delayMatch2_reg(7);
  delayMatch2_reg_next(9) <= delayMatch2_reg(8);
  delayMatch2_reg_next(10) <= delayMatch2_reg(9);
  delayMatch2_reg_next(11) <= delayMatch2_reg(10);
  delayMatch2_reg_next(12) <= delayMatch2_reg(11);
  delayMatch2_reg_next(13) <= delayMatch2_reg(12);
  delayMatch2_reg_next(14) <= delayMatch2_reg(13);
  delayMatch2_reg_next(15) <= delayMatch2_reg(14);
  delayMatch2_reg_next(16) <= delayMatch2_reg(15);
  delayMatch2_reg_next(17) <= delayMatch2_reg(16);
  delayMatch2_reg_next(18) <= delayMatch2_reg(17);
  delayMatch2_reg_next(19) <= delayMatch2_reg(18);
  delayMatch2_reg_next(20) <= delayMatch2_reg(19);
  delayMatch2_reg_next(21) <= delayMatch2_reg(20);
  delayMatch2_reg_next(22) <= delayMatch2_reg(21);
  delayMatch2_reg_next(23) <= delayMatch2_reg(22);
  delayMatch2_reg_next(24) <= delayMatch2_reg(23);
  delayMatch2_reg_next(25) <= delayMatch2_reg(24);
  delayMatch2_reg_next(26) <= delayMatch2_reg(25);
  delayMatch2_reg_next(27) <= delayMatch2_reg(26);
  delayMatch2_reg_next(28) <= delayMatch2_reg(27);
  delayMatch2_reg_next(29) <= delayMatch2_reg(28);
  delayMatch2_reg_next(30) <= delayMatch2_reg(29);
  delayMatch2_reg_next(31) <= delayMatch2_reg(30);
  delayMatch2_reg_next(32) <= delayMatch2_reg(31);
  delayMatch2_reg_next(33) <= delayMatch2_reg(32);
  delayMatch2_reg_next(34) <= delayMatch2_reg(33);
  delayMatch2_reg_next(35) <= delayMatch2_reg(34);
  delayMatch2_reg_next(36) <= delayMatch2_reg(35);
  delayMatch2_reg_next(37) <= delayMatch2_reg(36);
  delayMatch2_reg_next(38) <= delayMatch2_reg(37);
  delayMatch2_reg_next(39) <= delayMatch2_reg(38);
  delayMatch2_reg_next(40) <= delayMatch2_reg(39);
  delayMatch2_reg_next(41) <= delayMatch2_reg(40);
  delayMatch2_reg_next(42) <= delayMatch2_reg(41);
  delayMatch2_reg_next(43) <= delayMatch2_reg(42);
  delayMatch2_reg_next(44) <= delayMatch2_reg(43);
  delayMatch2_reg_next(45) <= delayMatch2_reg(44);
  delayMatch2_reg_next(46) <= delayMatch2_reg(45);

  m_axis_tuser <= FFT_HDL_Optimized_out2_1;

  Constant_out1 <= '1';

  s_axis_re_tready <= Constant_out1;

  Constant1_out1 <= '1';

  s_axis_im_tready <= Constant1_out1;

  m_axis_tdata <= Float_Typecast_out1;

END rtl;

