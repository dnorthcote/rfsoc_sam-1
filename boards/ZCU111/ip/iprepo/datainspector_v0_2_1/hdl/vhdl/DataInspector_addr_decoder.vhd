-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\dmareference\DataInspector_addr_decoder.vhd
-- Created: 2019-09-09 17:10:59
-- 
-- Generated by MATLAB 9.6 and HDL Coder 3.14
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: DataInspector_addr_decoder
-- Source Path: DataInspector/DataInspector_axi_lite/DataInspector_addr_decoder
-- Hierarchy Level: 2
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY DataInspector_addr_decoder IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        data_write                        :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
        addr_sel                          :   IN    std_logic_vector(13 DOWNTO 0);  -- ufix14
        wr_enb                            :   IN    std_logic;  -- ufix1
        rd_enb                            :   IN    std_logic;  -- ufix1
        read_ip_timestamp                 :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
        data_read                         :   OUT   std_logic_vector(31 DOWNTO 0);  -- ufix32
        write_axi_enable                  :   OUT   std_logic;  -- ufix1
        write_Transfer                    :   OUT   std_logic;  -- ufix1
        write_Reset                       :   OUT   std_logic  -- ufix1
        );
END DataInspector_addr_decoder;


ARCHITECTURE rtl OF DataInspector_addr_decoder IS

  -- Signals
  SIGNAL enb                              : std_logic;
  SIGNAL addr_sel_unsigned                : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL decode_sel_Reset                 : std_logic;  -- ufix1
  SIGNAL decode_sel_Transfer              : std_logic;  -- ufix1
  SIGNAL decode_sel_ip_timestamp          : std_logic;  -- ufix1
  SIGNAL decode_sel_axi_enable            : std_logic;  -- ufix1
  SIGNAL const_0                          : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL reg_enb_axi_enable               : std_logic;  -- ufix1
  SIGNAL data_write_unsigned              : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL data_in_axi_enable               : std_logic;  -- ufix1
  SIGNAL const_1_1                        : std_logic;  -- ufix1
  SIGNAL write_reg_axi_enable             : std_logic;  -- ufix1
  SIGNAL reg_mux_dtc_axi_enable_0         : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL read_ip_timestamp_unsigned       : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_switch_axi_enable_1       : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL read_reg_ip_timestamp            : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_rd_ip_timestamp           : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL reg_enb_Transfer                 : std_logic;  -- ufix1
  SIGNAL data_in_Transfer                 : std_logic;  -- ufix1
  SIGNAL write_reg_Transfer               : std_logic;  -- ufix1
  SIGNAL reg_mux_dtc_Transfer_0           : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_switch_Transfer_1         : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL reg_enb_Reset                    : std_logic;  -- ufix1
  SIGNAL data_in_Reset                    : std_logic;  -- ufix1
  SIGNAL write_reg_Reset                  : std_logic;  -- ufix1
  SIGNAL reg_mux_dtc_Reset_0              : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL decode_switch_Reset_1            : unsigned(31 DOWNTO 0);  -- ufix32

BEGIN
  addr_sel_unsigned <= unsigned(addr_sel);

  
  decode_sel_Reset <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0041#, 14) ELSE
      '0';

  
  decode_sel_Transfer <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0040#, 14) ELSE
      '0';

  
  decode_sel_ip_timestamp <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0002#, 14) ELSE
      '0';

  
  decode_sel_axi_enable <= '1' WHEN addr_sel_unsigned = to_unsigned(16#0001#, 14) ELSE
      '0';

  const_0 <= to_unsigned(0, 32);

  reg_enb_axi_enable <= decode_sel_axi_enable AND wr_enb;

  data_write_unsigned <= unsigned(data_write);

  data_in_axi_enable <= data_write_unsigned(0);

  const_1_1 <= '1';

  enb <= const_1_1;

  reg_axi_enable_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      write_reg_axi_enable <= '1';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND reg_enb_axi_enable = '1' THEN
        write_reg_axi_enable <= data_in_axi_enable;
      END IF;
    END IF;
  END PROCESS reg_axi_enable_process;


  reg_mux_dtc_axi_enable_0 <= '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & write_reg_axi_enable;

  read_ip_timestamp_unsigned <= unsigned(read_ip_timestamp);

  
  decode_switch_axi_enable_1 <= const_0 WHEN decode_sel_axi_enable = '0' ELSE
      reg_mux_dtc_axi_enable_0;

  reg_ip_timestamp_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      read_reg_ip_timestamp <= to_unsigned(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        read_reg_ip_timestamp <= read_ip_timestamp_unsigned;
      END IF;
    END IF;
  END PROCESS reg_ip_timestamp_process;


  
  decode_rd_ip_timestamp <= decode_switch_axi_enable_1 WHEN decode_sel_ip_timestamp = '0' ELSE
      read_reg_ip_timestamp;

  reg_enb_Transfer <= decode_sel_Transfer AND wr_enb;

  data_in_Transfer <= data_write_unsigned(0);

  reg_Transfer_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      write_reg_Transfer <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND reg_enb_Transfer = '1' THEN
        write_reg_Transfer <= data_in_Transfer;
      END IF;
    END IF;
  END PROCESS reg_Transfer_process;


  reg_mux_dtc_Transfer_0 <= '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & write_reg_Transfer;

  
  decode_switch_Transfer_1 <= decode_rd_ip_timestamp WHEN decode_sel_Transfer = '0' ELSE
      reg_mux_dtc_Transfer_0;

  reg_enb_Reset <= decode_sel_Reset AND wr_enb;

  data_in_Reset <= data_write_unsigned(0);

  reg_Reset_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      write_reg_Reset <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND reg_enb_Reset = '1' THEN
        write_reg_Reset <= data_in_Reset;
      END IF;
    END IF;
  END PROCESS reg_Reset_process;


  reg_mux_dtc_Reset_0 <= '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & write_reg_Reset;

  
  decode_switch_Reset_1 <= decode_switch_Transfer_1 WHEN decode_sel_Reset = '0' ELSE
      reg_mux_dtc_Reset_0;

  data_read <= std_logic_vector(decode_switch_Reset_1);

  write_axi_enable <= write_reg_axi_enable;

  write_Transfer <= write_reg_Transfer;

  write_Reset <= write_reg_Reset;

END rtl;

