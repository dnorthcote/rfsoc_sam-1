-- -------------------------------------------------------------
-- 
-- File Name: hdl_prj\hdlsrc\simple_window\window_src_Reconfigurable_Window.vhd
-- Created: 2020-10-19 10:59:01
-- 
-- Generated by MATLAB 9.8 and HDL Coder 3.16
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Model base rate: 3.90625e-09
-- Target subsystem base rate: 3.90625e-09
-- 
-- 
-- Clock Enable  Sample Time
-- -------------------------------------------------------------
-- ce_out        3.90625e-09
-- -------------------------------------------------------------
-- 
-- 
-- Output Signal                 Clock Enable  Sample Time
-- -------------------------------------------------------------
-- m_real_valid                  ce_out        3.90625e-09
-- m_real_data                   ce_out        3.90625e-09
-- m_real_user                   ce_out        3.90625e-09
-- m_real_last                   ce_out        3.90625e-09
-- m_imag_valid                  ce_out        3.90625e-09
-- m_imag_data                   ce_out        3.90625e-09
-- m_imag_user                   ce_out        3.90625e-09
-- m_imag_last                   ce_out        3.90625e-09
-- -------------------------------------------------------------
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: window_src_Reconfigurable_Window
-- Source Path: simple_window/Reconfigurable Window
-- Hierarchy Level: 0
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY window_src_Reconfigurable_Window IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        clk_enable                        :   IN    std_logic;
        enable                            :   IN    std_logic;
        s_window_valid                    :   IN    std_logic;
        s_window_data                     :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En14
        s_real_valid                      :   IN    std_logic;
        s_real_data                       :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En15
        s_imag_valid                      :   IN    std_logic;
        s_imag_data                       :   IN    std_logic_vector(15 DOWNTO 0);  -- sfix16_En15
        ce_out                            :   OUT   std_logic;
        m_real_valid                      :   OUT   std_logic;
        m_real_data                       :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En15
        m_real_user                       :   OUT   std_logic;
        m_real_last                       :   OUT   std_logic;
        m_imag_valid                      :   OUT   std_logic;
        m_imag_data                       :   OUT   std_logic_vector(15 DOWNTO 0);  -- sfix16_En15
        m_imag_user                       :   OUT   std_logic;
        m_imag_last                       :   OUT   std_logic
        );
END window_src_Reconfigurable_Window;


ARCHITECTURE rtl OF window_src_Reconfigurable_Window IS

  -- Component Declarations
  COMPONENT window_src_SimpleDualPortRAM_generic
    GENERIC( AddrWidth                    : integer;
             DataWidth                    : integer
             );
    PORT( clk                             :   IN    std_logic;
          enb                             :   IN    std_logic;
          wr_din                          :   IN    std_logic_vector(DataWidth - 1 DOWNTO 0);  -- generic width
          wr_addr                         :   IN    std_logic_vector(AddrWidth - 1 DOWNTO 0);  -- generic width
          wr_en                           :   IN    std_logic;
          rd_addr                         :   IN    std_logic_vector(AddrWidth - 1 DOWNTO 0);  -- generic width
          rd_dout                         :   OUT   std_logic_vector(DataWidth - 1 DOWNTO 0)  -- generic width
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : window_src_SimpleDualPortRAM_generic
    USE ENTITY work.window_src_SimpleDualPortRAM_generic(rtl);

  -- Signals
  SIGNAL enb                              : std_logic;
  SIGNAL Unit_Delay2_out1                 : std_logic;
  SIGNAL s_real_data_signed               : signed(15 DOWNTO 0);  -- sfix16_En15
  SIGNAL Unit_Delay3_out1                 : signed(15 DOWNTO 0);  -- sfix16_En15
  SIGNAL HDL_Counter1_out1                : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL HDL_Counter_out1                 : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL Simple_Dual_Port_RAM_System_out1 : std_logic_vector(15 DOWNTO 0);  -- ufix16
  SIGNAL Simple_Dual_Port_RAM_System_out1_signed : signed(15 DOWNTO 0);  -- sfix16_En14
  SIGNAL Product_mul_temp                 : signed(31 DOWNTO 0);  -- sfix32_En29
  SIGNAL Product_out1                     : signed(15 DOWNTO 0);  -- sfix16_En15
  SIGNAL Multiport_Switch_out1            : signed(15 DOWNTO 0);  -- sfix16_En15
  SIGNAL Unit_Delay1_out1                 : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL Compare_To_Zero_out1             : std_logic;
  SIGNAL AND_out1                         : std_logic;
  SIGNAL Compare_To_Constant_out1         : std_logic;
  SIGNAL AND1_out1                        : std_logic;
  SIGNAL s_imag_data_signed               : signed(15 DOWNTO 0);  -- sfix16_En15
  SIGNAL Unit_Delay4_out1                 : signed(15 DOWNTO 0);  -- sfix16_En15
  SIGNAL Product1_mul_temp                : signed(31 DOWNTO 0);  -- sfix32_En29
  SIGNAL Product1_out1                    : signed(15 DOWNTO 0);  -- sfix16_En15
  SIGNAL Multiport_Switch1_out1           : signed(15 DOWNTO 0);  -- sfix16_En15

BEGIN
  u_Simple_Dual_Port_RAM_System : window_src_SimpleDualPortRAM_generic
    GENERIC MAP( AddrWidth => 11,
                 DataWidth => 16
                 )
    PORT MAP( clk => clk,
              enb => clk_enable,
              wr_din => s_window_data,
              wr_addr => std_logic_vector(HDL_Counter1_out1),
              wr_en => s_window_valid,
              rd_addr => std_logic_vector(HDL_Counter_out1),
              rd_dout => Simple_Dual_Port_RAM_System_out1
              );

  enb <= clk_enable;

  Unit_Delay2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Unit_Delay2_out1 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Unit_Delay2_out1 <= s_real_valid;
      END IF;
    END IF;
  END PROCESS Unit_Delay2_process;


  s_real_data_signed <= signed(s_real_data);

  Unit_Delay3_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Unit_Delay3_out1 <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Unit_Delay3_out1 <= s_real_data_signed;
      END IF;
    END IF;
  END PROCESS Unit_Delay3_process;


  -- Count limited, Unsigned Counter
  --  initial value   = 0
  --  step value      = 1
  --  count to value  = 2047
  HDL_Counter1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      HDL_Counter1_out1 <= to_unsigned(16#000#, 11);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND s_window_valid = '1' THEN
        HDL_Counter1_out1 <= HDL_Counter1_out1 + to_unsigned(16#001#, 11);
      END IF;
    END IF;
  END PROCESS HDL_Counter1_process;


  -- Count limited, Unsigned Counter
  --  initial value   = 0
  --  step value      = 1
  --  count to value  = 2047
  HDL_Counter_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      HDL_Counter_out1 <= to_unsigned(16#000#, 11);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' AND s_real_valid = '1' THEN
        HDL_Counter_out1 <= HDL_Counter_out1 + to_unsigned(16#001#, 11);
      END IF;
    END IF;
  END PROCESS HDL_Counter_process;


  Simple_Dual_Port_RAM_System_out1_signed <= signed(Simple_Dual_Port_RAM_System_out1);

  Product_mul_temp <= Unit_Delay3_out1 * Simple_Dual_Port_RAM_System_out1_signed;
  Product_out1 <= Product_mul_temp(29 DOWNTO 14);

  
  Multiport_Switch_out1 <= Unit_Delay3_out1 WHEN enable = '0' ELSE
      Product_out1;

  m_real_data <= std_logic_vector(Multiport_Switch_out1);

  Unit_Delay1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Unit_Delay1_out1 <= to_unsigned(16#000#, 11);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Unit_Delay1_out1 <= HDL_Counter_out1;
      END IF;
    END IF;
  END PROCESS Unit_Delay1_process;


  
  Compare_To_Zero_out1 <= '1' WHEN Unit_Delay1_out1 = to_unsigned(16#000#, 11) ELSE
      '0';

  AND_out1 <= Compare_To_Zero_out1 AND Unit_Delay2_out1;

  
  Compare_To_Constant_out1 <= '1' WHEN Unit_Delay1_out1 = to_unsigned(16#7FF#, 11) ELSE
      '0';

  AND1_out1 <= Compare_To_Constant_out1 AND Unit_Delay2_out1;

  s_imag_data_signed <= signed(s_imag_data);

  Unit_Delay4_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Unit_Delay4_out1 <= to_signed(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Unit_Delay4_out1 <= s_imag_data_signed;
      END IF;
    END IF;
  END PROCESS Unit_Delay4_process;


  Product1_mul_temp <= Unit_Delay4_out1 * Simple_Dual_Port_RAM_System_out1_signed;
  Product1_out1 <= Product1_mul_temp(29 DOWNTO 14);

  
  Multiport_Switch1_out1 <= Unit_Delay4_out1 WHEN enable = '0' ELSE
      Product1_out1;

  m_imag_data <= std_logic_vector(Multiport_Switch1_out1);

  ce_out <= clk_enable;

  m_real_valid <= Unit_Delay2_out1;

  m_real_user <= AND_out1;

  m_real_last <= AND1_out1;

  m_imag_valid <= Unit_Delay2_out1;

  m_imag_user <= AND_out1;

  m_imag_last <= AND1_out1;

END rtl;

